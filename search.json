[{"path":"https://ropensci.github.io/rb3/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rb3","title":"Contributing to rb3","text":"First, thanks interest package apraisal contributing codebase rb3. academic, R projects official funding. always nice community helping maintaing code. main links contributing:","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to rb3","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to rb3","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"share-the-love-Ô∏è","dir":"","previous_headings":"How you can contribute","what":"Share the love ‚ù§Ô∏è","title":"Contributing to rb3","text":"Think our_package useful? Let others discover , telling person, via Twitter blog post. Using our_package paper writing? Consider citing .","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug üêõ","title":"Contributing to rb3","text":"‚Äôve found bug using package, please report creating issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g.¬†Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation üìñ","title":"Contributing to rb3","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"The website","title":"Contributing to rb3","text":"website generated pkgdown. means don‚Äôt write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"Function documentation","title":"Contributing to rb3","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code üìù","title":"Contributing to rb3","text":"Care fix bugs implement new functionality our_package? Awesome! üëè look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://ropensci.github.io/rb3/Contributing.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to rb3","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"https://ropensci.github.io/rb3/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rb3 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fetching Historical Equity Data","text":"B3 (Brasil, Bolsa, Balc√£o) provides historical stock market data COTAHIST files. files contain valuable information stocks, ETFs, BDRs, UNITs, REITs (FIIs), FIAGROs, FIDCs trading Brazilian exchange. rb3 package simplifies access data templates b3-cotahist-yearly b3-cotahist-daily, handle downloading processing files. COTAHIST files represent one comprehensive sources historical market data Brazil, annual files available far back 1986. However, due Brazil‚Äôs monetary stabilization process 1994 (Plano Real), generally recommended use data 1995 onwards. ‚Äôs important note prices files adjusted corporate actions, means long-term historical analysis individual stocks, additional adjustments may necessary. vignette, ‚Äôll explore fetch, filter, analyze historical equity data using rb3 package.","code":"library(rb3) library(dplyr) library(lubridate) library(ggplot2)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"fetching-historical-data","dir":"Articles","previous_headings":"","what":"Fetching historical data","title":"Fetching Historical Equity Data","text":"access historical equity data, need download COTAHIST files create corresponding datasets. rb3 package provides functions seamlessly handle process.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"downloading-yearly-data","dir":"Articles","previous_headings":"Fetching historical data","what":"Downloading yearly data","title":"Fetching Historical Equity Data","text":"comprehensive historical analysis, can download yearly COTAHIST files. ideal long-term studies covering multiple years.","code":"# Download data for multiple years (example: 2018 to 2024) fetch_marketdata(\"b3-cotahist-yearly\", year = 2018:2024)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"downloading-daily-data","dir":"Articles","previous_headings":"Fetching historical data","what":"Downloading daily data","title":"Fetching Historical Equity Data","text":"recent analysis need specific dates, can fetch daily data:","code":"# Download data for specific dates fetch_marketdata(\"b3-cotahist-daily\", refdate = as.Date(\"2024-01-02\"))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"accessing-the-datasets","dir":"Articles","previous_headings":"Fetching historical data","what":"Accessing the datasets","title":"Fetching Historical Equity Data","text":"downloading data, can access using cotahist_get() function: cotahist_get() function returns lazy query doesn‚Äôt immediately load data memory. approach allows efficient manipulation large datasets. materialize data R tibble, use collect() function.","code":"# Access yearly dataset ch <- cotahist_get(\"yearly\")  # Access daily dataset ch_daily <- cotahist_get(\"daily\")"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"filtering-by-asset-type","dir":"Articles","previous_headings":"","what":"Filtering by asset type","title":"Fetching Historical Equity Data","text":"COTAHIST files contain data various types assets. rb3 package provides specialized filter functions extract specific asset classes:","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"equities","dir":"Articles","previous_headings":"Filtering by asset type","what":"Equities","title":"Fetching Historical Equity Data","text":"stocks trading B3:","code":"# Filter for stocks from 2024 eq <- ch |>   filter(year(refdate) == 2024) |>   cotahist_filter_equity()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"etfs-exchange-traded-funds","dir":"Articles","previous_headings":"Filtering by asset type","what":"ETFs (Exchange Traded Funds)","title":"Fetching Historical Equity Data","text":"ETFs listed B3:","code":"# Filter for ETFs from 2024 etfs <- ch |>   filter(year(refdate) == 2024) |>   cotahist_filter_etf()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"reits-fiis---fundos-imobili√°rios","dir":"Articles","previous_headings":"Filtering by asset type","what":"REITs (FIIs - Fundos Imobili√°rios)","title":"Fetching Historical Equity Data","text":"real estate investment funds:","code":"# Filter for REITs from 2024 fii <- ch |>   filter(year(refdate) == 2024) |>   cotahist_filter_fii()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"bdrs-brazilian-depositary-receipts","dir":"Articles","previous_headings":"Filtering by asset type","what":"BDRs (Brazilian Depositary Receipts)","title":"Fetching Historical Equity Data","text":"Brazilian depositary receipts international companies:","code":"# Filter for BDRs bdrs <- cotahist_get() |>   cotahist_filter_bdr()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"other-asset-classes","dir":"Articles","previous_headings":"Filtering by asset type","what":"Other asset classes","title":"Fetching Historical Equity Data","text":"Additional filter functions available asset types: cotahist_filter_unit(): UNITs (sets securities traded single unit) cotahist_filter_fidc(): FIDCs (Credit Rights Investment Funds) cotahist_filter_fiagro(): FIAGROs (Agribusiness Investment Funds) cotahist_filter_index(): market indices cotahist_filter_equity_options(): stock options cotahist_filter_index_options(): index options cotahist_filter_fund_options(): fund options","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"analyzing-equity-data","dir":"Articles","previous_headings":"","what":"Analyzing equity data","title":"Fetching Historical Equity Data","text":"Let‚Äôs explore common analyses might perform historical data.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"top-traded-equities-by-volume","dir":"Articles","previous_headings":"Analyzing equity data","what":"Top traded equities by volume","title":"Fetching Historical Equity Data","text":"example identifies actively traded stocks visualizes monthly trading volumes: Monthly Trading Volume Top 10 Brazilian Stocks","code":"# Get top 10 stocks by volume symbols_eq <- eq |>   group_by(symbol) |>   summarise(volume = sum(volume)) |>   arrange(desc(volume)) |>   head(10) |>   pull(symbol, as_vector = TRUE)  # Calculate monthly volumes for top stocks eq_monthly <- eq |>   filter(symbol %in% symbols_eq) |>   mutate(month = floor_date(refdate, \"month\")) |>   group_by(month, symbol) |>   summarise(volume = sum(volume)) |>   collect()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"etf-market-share-analysis","dir":"Articles","previous_headings":"Analyzing equity data","what":"ETF market share analysis","title":"Fetching Historical Equity Data","text":"market share different ETFs provides insights investor preferences: Volume Share Top 10 ETFs","code":"# Calculate total ETF volume total_volume <- etfs |>   summarise(volume = sum(volume)) |>   pull(volume, as_vector = TRUE)  # Get volume share for top ETFs etf_shares <- etfs |>   group_by(symbol) |>   summarise(volume = sum(volume)) |>   collect() |>   mutate(volume_ratio = volume / total_volume) |>   slice_max(volume_ratio, n = 10) |>   mutate(volume_ratio_acc = cumsum(volume_ratio))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"analyzing-distribution-ids-for-price-continuity","dir":"Articles","previous_headings":"Analyzing equity data","what":"Analyzing distribution IDs for price continuity","title":"Fetching Historical Equity Data","text":"distribution_id field helps identify changes stock‚Äôs pricing series, might due corporate actions: Distribution ID Changes ITUB4 Price History ITUB4 Distribution ID","code":"# Select a specific stock symbol_ <- \"ITUB4\"  # Extract data for the selected stock stock_data <- equities |>   filter(symbol == symbol_) |>   arrange(refdate) |>   collect()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"working-with-bdrs","dir":"Articles","previous_headings":"","what":"Working with BDRs","title":"Fetching Historical Equity Data","text":"Brazilian Depositary Receipts (BDRs) represent shares companies listed foreign exchanges: Trading Volume AAPL34 (Apple BDR)","code":"# Find the most common BDRs in the dataset top_bdrs <- bdrs |>   group_by(symbol) |>   count(sort = TRUE) |>   head(15) |>   collect()  # Analyze trading volume for a specific BDR bdr_data <- bdrs |>   filter(symbol == \"AAPL34\") |>   arrange(refdate) |>   collect()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-equity-data.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fetching Historical Equity Data","text":"vignette, ‚Äôve explored fetch analyze historical equity data B3 using rb3 package. package provides efficient tools downloading COTAHIST files extracting specific asset classes specialized filter functions. key steps working historical equity data include: Downloading data using fetch_marketdata() either b3-cotahist-yearly b3-cotahist-daily templates Accessing datasets cotahist_get() Filtering asset type using specialized functions like cotahist_filter_equity(), cotahist_filter_etf(), etc. Analyzing data using standard R data manipulation visualization tools workflow enables wide range analyses, studying trading volumes market shares tracking price movements identifying corporate actions distribution IDs. advanced analyses, might consider: Adjusting prices corporate actions Building portfolios calculating returns Analyzing liquidity patterns Studying sector performance Constructing custom indices combination B3‚Äôs comprehensive historical data rb3 package‚Äôs user-friendly interface provides powerful toolkit researching analyzing Brazilian equity market.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to Compute Historical Rates from B3 Future Prices","text":"template b3-futures-settlement-prices allows fetch historical settlement prices future contracts B3 (Brasil, Bolsa, Balc√£o), Brazilian stock exchange derivatives market. vignette provides step--step guide retrieve, process, analyze data using rb3 package. futures contract settlement prices published daily B3. settlement prices represent official daily closing values used marking positions market calculating margin requirements. data publicly available B3 website Trading session settlements page. page provides one longest available historical records futures contract prices. ‚Äôll use historical pricing data analyze trends, term structures, patterns Brazilian futures markets.","code":"library(rb3) # B3 data access library(ggplot2) # data visualization library(stringr) # string manipulation library(dplyr) # data transformation library(bizdays) # business days calculations"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"fetching-historical-data","dir":"Articles","previous_headings":"","what":"Fetching historical data","title":"How to Compute Historical Rates from B3 Future Prices","text":"analyze historical futures data, ‚Äôll collect settlement prices regular intervals. ‚Äôll fetch data first Monday week two-year period (2021-2022). First, generate sequence dates representing first Mondays January 2021 December 2022. adjust dates using following() function bizdays package ensure get valid trading days B3 calendar. use ‚Äúfirst mon‚Äù select Mondays 7-day interval weekly samples. provides regular sampling points keeping dataset manageable. selecting dates, use fetch_marketdata() function rb3 package : Download futures settlement prices data B3‚Äôs website Parse raw data structured format Store rb3 package‚Äôs internal database efficient queries process avoids repeated downloads provides consistent access data. stored data creates dataset b3-futures-settlement-prices, can queried analyzed efficiently. leveraging rb3 bizdays packages together, can efficiently manage analyze historical market data B3, enabling us explore various aspects Brazilian financial markets.","code":"dates <- getdate(\"first mon\", seq(as.Date(\"2021-01-01\"), as.Date(\"2022-12-24\"), by = 7), \"actual\") |>   following(\"Brazil/B3\") fetch_marketdata(\"b3-futures-settlement-prices\", refdate = dates)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"querying-the-data","dir":"Articles","previous_headings":"Fetching historical data","what":"Querying the data","title":"How to Compute Historical Rates from B3 Future Prices","text":"fetching historical futures data, can query using futures_get() function rb3 package. function allows us retrieve data stored internal database efficiently. Note futures_get() uses lazy evaluation, meaning loads data explicitly requested. Call futures_get() function retrieve dataset. , use collect() function load data data frame analysis. example, see use function futures_get() access data stored b3-futures-settlement-prices dataset. queried data can now used analysis, calculating historical nominal real interest rates, implied inflation, forward rates.","code":"# Retrieve the futures settlement prices data df <- futures_get() |>   collect() # Display the first few rows of the dataset head(df) #> # A tibble: 6 √ó 8 #>   refdate    symbol commodity maturity_code previous_price  price price_change #>   <date>     <chr>  <chr>     <chr>                  <dbl>  <dbl>        <dbl> #> 1 2021-01-04 AFSF21 AFS       F21                   14605  14605           0   #> 2 2021-01-04 AFSG21 AFS       G21                   14670. 14747          76.7 #> 3 2021-01-04 AFSH21 AFS       H21                   14718. 14792.         74.8 #> 4 2021-01-04 AFSJ21 AFS       J21                   14783. 14853.         70.2 #> 5 2021-01-04 AFSK21 AFS       K21                   14831. 14903.         71.5 #> 6 2021-01-04 AFSM21 AFS       M21                   14880. 14953.         73.2 #> # ‚Ñπ 1 more variable: settlement_value <dbl>"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"historical-nominal-interest-rates","dir":"Articles","previous_headings":"","what":"Historical nominal interest rates","title":"How to Compute Historical Rates from B3 Future Prices","text":"Interest rates can derived prices futures contracts. DI1 contracts mature first day month. code generates maturity dates three characters maturity code. , calculate implied rates considering notional value contracts 100000. Adjusted Rate=(100000Price)252Business Days‚àí1 \\text{Adjusted Rate} = \\left(\\frac{100000}{\\text{Price}}\\right)^{\\frac{252}{\\text{Business Days}}} - 1 graph see dynamics nominal interest rates contracts DI1F23 DI1F33. contracts exactly 10 years distant . DI1 Future Rates - Nominal Interest Rates","code":"di1_futures <- df |>   filter(commodity == \"DI1\") |>   mutate(     maturity_date = maturity2date(maturity_code),     fixing = following(maturity_date, \"Brazil/ANBIMA\"),     business_days = bizdays(refdate, maturity_date, \"Brazil/ANBIMA\"),     adjusted_tax = (100000 / price)^(252 / business_days) - 1   ) |>   filter(business_days > 0) di1_futures |>   filter(symbol %in% c(\"DI1F23\", \"DI1F33\")) |>   ggplot(aes(x = refdate, y = adjusted_tax, color = symbol, group = symbol)) +   geom_line() +   labs(     title = \"DI1 Future Rates - Nominal Interest Rates\",     caption = \"Source B3 - package rb3\",     x = \"Date\",     y = \"Interest Rates\",     color = \"Symbol\"   ) +   scale_y_continuous(labels = scales::percent)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"historical-real-interest-rates","dir":"Articles","previous_headings":"","what":"Historical real interest rates","title":"How to Compute Historical Rates from B3 Future Prices","text":"Differently DI1 contracts, trade nominal interest rates, DAP contracts trade real interest rates. DAP contracts matures 15th day month. code generates maturity dates three characters maturity code. , calculate implied rates considering notional value contracts 100000, exactly DI1 contracts. graphic shows dynamics real interest rates contracts DAPF23 DAPK35. contracts exactly 12 years distant . Since don‚Äôt 10-year contract, use 12-year contract reference observe dynamics short long term real interest rates. DAP Future Rates - Real Interest Rates","code":"dap_futures <- df |>   filter(commodity == \"DAP\") |>   mutate(     maturity_date = maturity2date(maturity_code, \"15th day\"),     fixing = following(maturity_date, \"Brazil/ANBIMA\"),     business_days = bizdays(refdate, maturity_date, \"Brazil/ANBIMA\"),     adjusted_tax = (100000 / price)^(252 / business_days) - 1   ) |>   filter(business_days > 0) dap_futures |>   filter(symbol %in% c(\"DAPF23\", \"DAPK35\")) |>   ggplot(aes(x = refdate, y = adjusted_tax, group = symbol, color = symbol)) +   geom_line() +   geom_point() +   labs(     title = \"DAP Future Rates - Real Interest Rates\",     caption = \"Source B3 - package rb3\",     x = \"Date\",     y = \"Interest Rates\",     color = \"Symbol\"   ) +   scale_y_continuous(labels = scales::percent)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"implied-inflation","dir":"Articles","previous_headings":"","what":"Implied inflation","title":"How to Compute Historical Rates from B3 Future Prices","text":"comparing real nominal interest rates, can derive forward inflation implied contracts. Specifically, use DI1F23 DAPF23 contracts, mature month days‚Äô difference. implied inflation can calculated dividing prices contracts. Inflation‚âàDAPF23DI1F23‚àí1 \\text{Inflation} \\approx \\frac{\\text{DAPF23}}{\\text{DI1F23}} - 1 Implied Inflation futures can observe , contracts approach maturity, implied inflation converges zero, expected. overcome bias, let‚Äôs redo graph F24 maturity. Implied Inflation futures","code":"infl_futures <- df |>   filter(symbol %in% c(\"DI1F23\", \"DAPF23\"))  infl_expec <- infl_futures |>   select(symbol, price, refdate) |>   tidyr::pivot_wider(names_from = symbol, values_from = price) |>   mutate(inflation = DAPF23 / DI1F23 - 1) infl_expec |>   ggplot(aes(x = refdate, y = inflation)) +   geom_line() +   geom_point() +   labs(     x = \"Date\", y = \"Inflation\",     title = \"Implied Inflation from futures DI1F23, DAPF23\",     caption = \"Source B3 - package rb3\"   ) df |>   filter(symbol %in% c(\"DI1F24\", \"DAPF24\")) |>   select(symbol, price, refdate) |>   tidyr::pivot_wider(names_from = symbol, values_from = price) |>   mutate(inflation = DAPF24 / DI1F24 - 1) |>   na.omit() |>   ggplot(aes(x = refdate, y = inflation)) +   geom_line() +   geom_point() +   labs(     x = \"Date\", y = \"Inflation\",     title = \"Implied Inflation from futures DI1F24, DAPF24\",     caption = \"Source B3 - package rb3\"   )"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"forward-rates","dir":"Articles","previous_headings":"","what":"Forward rates","title":"How to Compute Historical Rates from B3 Future Prices","text":"10-year forward rates implied DI1 futures prices can computed using DI1F23 DI1F33 contracts. contracts used calculate 10-year forward rates, range January 2023 January 2033. follows steps calculate forward rates. Filter Data: filter dataframe df include rows symbol either ‚ÄúDI1F23‚Äù ‚ÄúDI1F33‚Äù. Save filtered dataframe new dataframe called df_fut. Calculate Maturity Date Business Days: convert maturity_code maturity_date adjust next business day according ‚ÄúBrazil/ANBIMA‚Äù calendar. Calculate number business days reference date (refdate) maturity date. Calculate Difference Business Days: calculate difference business days DI1F23 DI1F33 contracts. Save information new dataframe called df_du. Join Dataframes: join df_fut df_du dataframes refdate column. Select refdate, symbol, price columns df_fut dataframe. Pivot df_fut dataframe symbol columns price values. Now prices futures business days , date, row. Calculate Forward Rates: calculate 10-year forward rates using formula . Forward Rate=(DI1F23DI1F33)252Business Days‚àí1 \\text{Forward Rate} = \\left(\\frac{\\text{DI1F23}}{\\text{DI1F33}}\\right)^{\\frac{252}{\\text{Business Days}}} - 1 Make graph showing dynamics 10-year forward rates January 2023 January 2033. Forward Rates","code":"df_fut <- df |>   filter(symbol %in% c(\"DI1F23\", \"DI1F33\")) df_fut <- df_fut |>   mutate(     maturity_date = maturity2date(maturity_code) |>       following(\"Brazil/ANBIMA\"),     business_days = bizdays(refdate, maturity_date, \"Brazil/ANBIMA\")   ) df_du <- df_fut |>   select(refdate, symbol, business_days) |>   tidyr::pivot_wider(names_from = symbol, values_from = business_days) |>   mutate(     du = DI1F33 - DI1F23   ) |>   select(refdate, du) df_fut <- df_fut |>   select(refdate, symbol, price) |>   tidyr::pivot_wider(names_from = symbol, values_from = price) |>   inner_join(df_du, by = \"refdate\") df_fwd <- df_fut |>   mutate(     fwd = (DI1F23 / DI1F33)^(252 / du) - 1   ) |>   select(refdate, fwd) |>   na.omit() df_fwd |>   ggplot(aes(x = refdate, y = fwd)) +   geom_line() +   labs(     x = \"Date\", y = \"Forward Rates\",     title = \"Historical 10Y Forward Rates - F23:F33\",     caption = \"Source B3 - package rb3\"   )"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-future-rates.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"How to Compute Historical Rates from B3 Future Prices","text":"document, demonstrated fetch analyze historical futures contract settlement prices B3 (Brasil, Bolsa, Balc√£o). leveraging rb3 package, able efficiently download, query, process data derive meaningful insights. covered following key steps: Fetching Historical Data: collected settlement prices regular intervals two-year period stored rb3 package‚Äôs internal database. Querying Data: Using futures_get() function, retrieved data analysis. Calculating Historical Nominal Real Interest Rates: derived interest rates prices DI1 DAP futures contracts. Implied Inflation: comparing real nominal interest rates, calculated forward inflation implied contracts. Forward Rates: computed 10-year forward rates using DI1F23 DI1F33 contracts. analyses, gained insights trends, term structures, patterns Brazilian futures markets. ability efficiently process analyze data crucial market participants, researchers, policymakers make informed decisions. following steps outlined document, can replicate analysis adapt specific needs. rb3 package provides powerful toolset accessing analyzing B3 market data, enabling explore various aspects Brazilian financial markets.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing B3 Index Data","text":"B3 (Brasil, Bolsa, Balc√£o) provides comprehensive data market indices various endpoints. indices represent essential benchmarks Brazilian financial market, measuring performance different market segments. rb3 package simplifies access data four key templates: b3-indexes-historical-data: Historical performance data B3 indices b3-indexes-composition: Composition B3 indices showing stocks belong index b3-indexes-theoretical-portfolio: Theoretical portfolio weights indices detailed component weights b3-indexes-current-portfolio: Current actual portfolio additional sector classification information vignette demonstrates retrieve, analyze, visualize index data using rb3 package, featuring examples popular indices like Ibovespa (IBOV), Small Caps (SMLL), Dividend Index (IDIV).","code":"library(rb3) library(dplyr) library(ggplot2) library(tidyr) library(stringr) library(lubridate)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"retrieving-available-indices","dir":"Articles","previous_headings":"","what":"Retrieving available indices","title":"Analyzing B3 Index Data","text":"rb3 package provides function retrieve available indices B3: codes represent various indices calculated published B3. important ones include: IBOV: Ibovespa - main Brazilian stock market index SMLL: Small Caps Index - represents smaller market capitalization stocks IDIV: Dividend Index - tracks stocks best dividend payment policy IBXX: IBrX-100 - represents 100 traded stocks IBXL: IBrX-50 - represents 50 traded stocks IBRA: Brazil Broad-Based Index - broader market index","code":"# Get all available indices indexes <- indexes_get() head(indexes) #> [1] \"AGFS\" \"BDRX\" \"GPTW\" \"IBBR\" \"IBEE\" \"IBEP\""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"fetching-historical-index-data","dir":"Articles","previous_headings":"","what":"Fetching historical index data","title":"Analyzing B3 Index Data","text":"analyze historical performance indices, can use b3-indexes-historical-data template: downloading, can retrieve analyze data:","code":"# Download historical data for specific indices across multiple years fetch_marketdata(\"b3-indexes-historical-data\",   throttle = TRUE,   index = c(\"IBOV\", \"SMLL\", \"IDIV\"),   year = 2018:2023 ) # Get the historical data for analysis index_history <- indexes_historical_data_get() |>   filter(     symbol %in% c(\"IBOV\", \"SMLL\", \"IDIV\"),     refdate >= \"2018-01-01\"   ) |>   collect()"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"visualizing-index-performance","dir":"Articles","previous_headings":"Fetching historical index data","what":"Visualizing index performance","title":"Analyzing B3 Index Data","text":"Let‚Äôs compare performance multiple indices time: Historical Performance B3 Indices (2018-2023) chart shows relative performance selected indices, allowing compare movements regardless absolute values.","code":"# Calculate the normalized performance (setting the starting point to 100) index_performance <- index_history |>   group_by(symbol) |>   arrange(refdate) |>   mutate(     norm_value = value / first(value) * 100   )  # Create the performance chart ggplot(index_performance, aes(x = refdate, y = norm_value, color = symbol)) +   geom_line(linewidth = 1) +   labs(     title = \"Comparative Performance of B3 Indices\",     subtitle = \"Normalized values (starting at 100)\",     x = \"Date\",     y = \"Normalized Value\",     color = \"Index\"   ) +   theme_light() +   scale_x_date(date_labels = \"%b %Y\", date_breaks = \"6 months\") +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"analyzing-index-composition","dir":"Articles","previous_headings":"","what":"Analyzing index composition","title":"Analyzing B3 Index Data","text":"b3-indexes-composition template provides data stocks belong index: downloading, can retrieve composition data:","code":"# Download index composition data fetch_marketdata(\"b3-indexes-composition\") # Get the composition data composition <- indexes_composition_get() |>   collect() # Display a subset of the composition data head(composition) #> # A tibble: 6 √ó 3 #>   update_date symbol indexes                                      #>   <date>      <chr>  <chr>                                        #> 1 2025-04-14  TTEN3  AGFS,IBRA,ICO2,ICON,IGCT,IGCX,IGNM,ITAG,SMLL #> 2 2025-04-14  ABBV34 BDRX                                         #> 3 2025-04-14  ABCB4  IBRA,ICO2,IDIV,IFNC,IGCT,IGCX,ITAG,SMLL      #> 4 2025-04-14  ADBE34 BDRX                                         #> 5 2025-04-14  A1AP34 BDRX                                         #> 6 2025-04-14  A1MD34 BDRX"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"finding-stocks-in-multiple-indices","dir":"Articles","previous_headings":"Analyzing index composition","what":"Finding stocks in multiple indices","title":"Analyzing B3 Index Data","text":"can analyze stocks appear multiple key indices: Overlapping Stocks Major B3 Indices","code":"# Get stocks in specific indices selected_indices <- c(\"IBOV\", \"SMLL\", \"IDIV\")  # Find stocks in each index stocks_by_index <- lapply(selected_indices, function(idx) {   composition |>     filter(update_date == latest_date, str_detect(indexes, idx)) |>     pull(symbol) }) names(stocks_by_index) <- selected_indices # Create a data frame for the Venn diagram visualization index_overlaps <- data.frame(   Index = c(     \"IBOV only\", \"SMLL only\", \"IDIV only\",     \"IBOV & SMLL\", \"IBOV & IDIV\", \"SMLL & IDIV\",     \"All three indices\"   ),   Count = c(     length(setdiff(setdiff(stocks_by_index$IBOV, stocks_by_index$SMLL), stocks_by_index$IDIV)),     length(setdiff(setdiff(stocks_by_index$SMLL, stocks_by_index$IBOV), stocks_by_index$IDIV)),     length(setdiff(setdiff(stocks_by_index$IDIV, stocks_by_index$IBOV), stocks_by_index$SMLL)),     length(intersect(setdiff(stocks_by_index$IBOV, stocks_by_index$IDIV), stocks_by_index$SMLL)),     length(intersect(setdiff(stocks_by_index$IBOV, stocks_by_index$SMLL), stocks_by_index$IDIV)),     length(intersect(setdiff(stocks_by_index$SMLL, stocks_by_index$IBOV), stocks_by_index$IDIV)),     length(Reduce(intersect, stocks_by_index))   ) )  # Create a bar chart to visualize overlaps ggplot(index_overlaps, aes(x = reorder(Index, Count), y = Count)) +   geom_bar(stat = \"identity\", fill = \"steelblue\") +   coord_flip() +   labs(     title = \"Stock Overlap Between Major B3 Indices\",     subtitle = paste(\"As of\", latest_date),     x = NULL,     y = \"Number of Stocks\"   ) +   theme_light() +   geom_text(aes(label = Count), hjust = -0.2)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"finding-which-indices-contain-a-specific-stock","dir":"Articles","previous_headings":"Analyzing index composition","what":"Finding which indices contain a specific stock","title":"Analyzing B3 Index Data","text":"can also determine indices include specific stock:","code":"# Find all indices that include a specific stock find_indices_for_stock <- function(stock_symbol, comp_data, date) {   comp_data |>     filter(update_date == date, symbol == stock_symbol) |>     pull(indexes) |>     str_split(\",\") |>     unlist() |>     sort() }  # Example: Find indices containing PETR4 petr4_indices <- find_indices_for_stock(\"PETR4\", composition, latest_date) #>  [1] \"IBBR\" \"IBEE\" \"IBEW\" \"IBLV\" \"IBOV\" \"IBRA\" \"IBSD\" \"IBXL\" \"IBXX\" \"IDIV\" #> [11] \"IDVR\" \"IGCT\" \"IGCX\" \"ITAG\" \"MLCX\""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"analyzing-index-weights-with-the-theoretical-portfolio","dir":"Articles","previous_headings":"","what":"Analyzing index weights with the theoretical portfolio","title":"Analyzing B3 Index Data","text":"b3-indexes-theoretical-portfolio template provides information weights stocks index: downloading, can retrieve analyze portfolio weights:","code":"# Download theoretical portfolio data fetch_marketdata(\"b3-indexes-theoretical-portfolio\", index = c(\"IBOV\", \"SMLL\", \"IDIV\")) # Get the theoretical portfolio data theoretical <- indexes_theoretical_portfolio_get() |>   collect()  # Get the latest date for each index latest_dates <- theoretical |>   group_by(index) |>   summarise(latest = max(refdate))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"top-constituents-by-weight","dir":"Articles","previous_headings":"Analyzing index weights with the theoretical portfolio","what":"Top constituents by weight","title":"Analyzing B3 Index Data","text":"can analyze top constituents index weight: Top 10 Constituents Weight Ibovespa","code":"# Get the top 10 constituents by weight for IBOV ibov_top10 <- theoretical |>   filter(index == \"IBOV\", refdate == latest_dates$latest[latest_dates$index == \"IBOV\"]) |>   arrange(desc(weight)) |>   slice_head(n = 10)  # Create a bar chart of top constituents ggplot(ibov_top10, aes(x = reorder(symbol, weight), y = weight)) +   geom_bar(stat = \"identity\", fill = \"darkblue\") +   coord_flip() +   labs(     title = \"Top 10 Constituents by Weight in Ibovespa\",     subtitle = paste(\"As of\", latest_dates$latest[latest_dates$index == \"IBOV\"]),     x = NULL,     y = \"Weight (%)\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent) +   geom_text(aes(label = scales::percent(weight, accuracy = 0.01)), hjust = -0.2)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"comparing-index-concentration","dir":"Articles","previous_headings":"Analyzing index weights with the theoretical portfolio","what":"Comparing index concentration","title":"Analyzing B3 Index Data","text":"can compare concentration different indices analyzing weight distribution: Weight Concentration B3 Indices chart shows concentrated index , revealing differences construction methodology.","code":"# Calculate cumulative weights for different indices concentration_data <- list()  for (idx in c(\"IBOV\", \"SMLL\", \"IDIV\")) {   latest <- latest_dates$latest[latest_dates$index == idx]    index_weights <- theoretical |>     filter(index == idx, refdate == latest) |>     arrange(desc(weight))    total_stocks <- nrow(index_weights)    concentration_data[[idx]] <- data.frame(     index = idx,     top_n = c(1, 5, 10, 20, total_stocks),     cum_weight = c(       sum(index_weights$weight[1:1]),       sum(index_weights$weight[1:5]),       sum(index_weights$weight[1:10]),       sum(index_weights$weight[1:20]),       sum(index_weights$weight)     )   ) }  concentration_df <- bind_rows(concentration_data)  # Create a grouped bar chart concentration_plot <- concentration_df |>   filter(top_n %in% c(1, 5, 10, 20)) |>   mutate(top_n_label = paste(\"Top\", top_n))  ggplot(concentration_plot, aes(x = index, y = cum_weight, fill = factor(top_n))) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(     title = \"Index Concentration Analysis\",     subtitle = \"Cumulative weight of top constituents\",     x = NULL,     y = \"Cumulative Weight\",     fill = \"Number of Stocks\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent) +   scale_fill_brewer(palette = \"Blues\", labels = c(\"Top 1\", \"Top 5\", \"Top 10\", \"Top 20\"))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"sector-analysis-with-the-current-portfolio","dir":"Articles","previous_headings":"","what":"Sector analysis with the current portfolio","title":"Analyzing B3 Index Data","text":"b3-indexes-current-portfolio template provides actual current portfolio additional sector classification: downloading, can retrieve data:","code":"# Download current portfolio data fetch_marketdata(\"b3-indexes-current-portfolio\", index = c(\"IBOV\", \"SMLL\", \"IDIV\")) # Get the current portfolio data current <- indexes_current_portfolio_get() |>   collect()  # Get the latest date for each index current_latest <- current |>   group_by(index) |>   summarise(latest = max(refdate))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"sector-composition-analysis","dir":"Articles","previous_headings":"Sector analysis with the current portfolio","what":"Sector composition analysis","title":"Analyzing B3 Index Data","text":"can analyze sector composition different indices: Sector Breakdown B3 Indices visualization shows sector exposure varies across different indices, important diversification analysis.","code":"# Create sector breakdown for each index sector_data <- list()  for (idx in c(\"IBOV\", \"SMLL\", \"IDIV\")) {   latest <- current_latest$latest[current_latest$index == idx]    sector_data[[idx]] <- current |>     filter(index == idx, refdate == latest) |>     group_by(sector) |>     summarise(weight = sum(weight)) |>     arrange(desc(weight)) |>     mutate(index = idx) }  sector_df <- bind_rows(sector_data)  # Create a grouped bar chart for sector comparison ggplot(sector_df, aes(x = index, y = weight, fill = sector)) +   geom_bar(stat = \"identity\") +   labs(     title = \"Sector Composition of B3 Indices\",     subtitle = paste(\"As of\", format(max(current_latest$latest), \"%b %Y\")),     x = NULL,     y = \"Weight\",     fill = \"Sector\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent) +   coord_flip() +   theme(legend.position = \"bottom\", legend.box = \"horizontal\")"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"creating-helper-functions-for-index-analysis","dir":"Articles","previous_headings":"","what":"Creating helper functions for index analysis","title":"Analyzing B3 Index Data","text":"can create helper functions streamline common tasks:","code":"# Function to get assets in specific indices indexes_assets_by_indexes <- function(index_list) {   last_date <- indexes_composition_get() |>     summarise(update_date = max(update_date)) |>     collect() |>     pull(update_date)    x <- lapply(index_list, function(idx) {     indexes_composition_get() |>       filter(update_date == last_date, str_detect(indexes, idx)) |>       select(symbol) |>       collect() |>       pull(symbol)   })   stats::setNames(x, index_list) }  # Function to find which indices contain specific assets indexes_indexes_by_assets <- function(symbols) {   last_date <- indexes_composition_get() |>     summarise(update_date = max(update_date)) |>     collect() |>     pull(update_date)    indexes_composition_get() |>     filter(update_date == last_date, symbol %in% symbols) |>     select(symbol, indexes) |>     collect() |>     mutate(       indexes_list = str_split(indexes, \",\")     ) }"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"analyzing-index-performance-metrics","dir":"Articles","previous_headings":"","what":"Analyzing index performance metrics","title":"Analyzing B3 Index Data","text":"can calculate various performance metrics indices: Monthly Returns B3 Indices","code":"# Calculate monthly returns monthly_returns <- index_history |>   group_by(symbol) |>   arrange(refdate) |>   mutate(     year_month = floor_date(refdate, \"month\"),     monthly_return = value / lag(value) - 1   ) |>   filter(!is.na(monthly_return)) |>   group_by(symbol, year_month) |>   summarise(     monthly_return = last(monthly_return),     .groups = \"drop\"   )  # Visualize the monthly returns ggplot(monthly_returns, aes(x = year_month, y = monthly_return, fill = symbol)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   facet_wrap(~symbol, ncol = 1) +   labs(     title = \"Monthly Returns of B3 Indices\",     x = NULL,     y = \"Monthly Return\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent) +   theme(legend.position = \"none\")"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"calculating-summary-statistics","dir":"Articles","previous_headings":"Analyzing index performance metrics","what":"Calculating summary statistics","title":"Analyzing B3 Index Data","text":"can calculate summary statistics compare performance different indices:","code":"# Calculate annualized summary statistics performance_summary <- monthly_returns |>   group_by(symbol) |>   summarise(     Mean = mean(monthly_return, na.rm = TRUE),     Median = median(monthly_return, na.rm = TRUE),     Std.Dev = sd(monthly_return, na.rm = TRUE),     Min = min(monthly_return, na.rm = TRUE),     Max = max(monthly_return, na.rm = TRUE),     Positive = mean(monthly_return > 0, na.rm = TRUE)   ) |>   mutate(     Annualized.Return = (1 + Mean)^12 - 1,     Annualized.Volatility = Std.Dev * sqrt(12),     Sharpe = Annualized.Return / Annualized.Volatility   )  # Display the summary statistics performance_summary |>   select(symbol, Annualized.Return, Annualized.Volatility, Sharpe, Positive) |>   mutate(     Annualized.Return = scales::percent(Annualized.Return, accuracy = 0.01),     Annualized.Volatility = scales::percent(Annualized.Volatility, accuracy = 0.01),     Sharpe = round(Sharpe, 2),     Positive = scales::percent(Positive, accuracy = 0.1)   ) |>   rename(     Index = symbol,     `Ann. Return` = Annualized.Return,     `Ann. Volatility` = Annualized.Volatility,     `Sharpe Ratio` = Sharpe,     `% Positive Months` = Positive   ) #> # A tibble: 3 √ó 5 #>   Index `Ann. Return` `Ann. Volatility` `Sharpe Ratio` `% Positive Months` #>   <chr> <chr>         <chr>                      <dbl> <chr>               #> 1 IBOV  -3.54%        4.60%                      -0.77 41.7%               #> 2 IDIV  -2.18%        4.01%                      -0.55 47.2%               #> 3 SMLL  -1.45%        5.17%                      -0.28 47.2%"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-index-data.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Analyzing B3 Index Data","text":"vignette demonstrated work B3 index data using rb3 package. covered: Retrieving Available Indices: Using indexes_get() list available B3 indices. Historical Performance Analysis: Using b3-indexes-historical-data analyze visualize index performance time. Index Composition Analysis: Using b3-indexes-composition understand stocks belong index. Portfolio Weight Analysis: Using b3-indexes-theoretical-portfolio analyze weights concentration indices. Sector Exposure Analysis: Using b3-indexes-current-portfolio analyze sector allocation within indices. Performance Metrics: Calculating comparing performance statistics across different indices. combination four templates provides comprehensive toolkit analyzing Brazilian equity market indices, suitable investors, researchers, analysts. advanced analyses, might consider: Tracking changes index composition time Building factor models using index constituents Creating custom indices based specific criteria Analyzing relationship index performance macroeconomic variables Constructing optimized portfolios based index data","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fetching B3 Yield Curves","text":"template b3-reference-rates allows fetch historical yield curves B3, Brazilian stock exchange. vignette provides step--step guide retrieve visualize curves using rb3 package. yield curve key tool financial markets, offering insights interest rate expectations, inflation outlook, economic sentiment. Brazil, local exchange (B3) publishes set reference yield curves built pricing interest rate futures contracts. B3 provides historical yield curves website. curves built using interest rate futures contracts. vignette demonstrates retrieve analyze historical yield curves B3 using rb3 R package. focus three main curves: PRE: nominal interest rate curve, derived fixed-rate (DI) futures. DIC: real interest rate curve, based IPCA-indexed futures (Cupom de IPCA). DOC: FX-linked curve (Cupom Cambial), reflecting interest rate differential BRL USD. details B3 constructs curves, see B3‚Äôs reference rate documentation (PDF).","code":"library(rb3) library(ggplot2) library(dplyr) library(bizdays)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"fetching-the-data","dir":"Articles","previous_headings":"","what":"Fetching the data","title":"Fetching B3 Yield Curves","text":"section, fetch historical yield curve data years 2021 2025. yield curves constructed using interest rate futures data, provided B3. obtain data, follow two main steps:","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"selecting-reference-dates","dir":"Articles","previous_headings":"Fetching the data","what":"Selecting Reference Dates","title":"Fetching B3 Yield Curves","text":"begin selecting first business day year 2021 2025 using getdate() function. provides set consistent reference points, free seasonal distortions holiday effects, ideal comparing yield curves time.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"fetching-and-storing-market-data","dir":"Articles","previous_headings":"Fetching the data","what":"2. Fetching and Storing Market Data","title":"Fetching B3 Yield Curves","text":"fetch_marketdata() function used download yield curve data selected reference dates using template b3-reference-rates. template designed fetch reference rates B3‚Äôs systems. function fetches data directly B3‚Äôs systems stores structured format within rb3 package database. data stored locally optimized structure, allowing efficient querying analysis subsequent steps. specify curve_name argument request data three different yield curves: PRE: Nominal Interest Rate curve. curve represents market‚Äôs expectations accumulated interbank interest rates (DI - interbank deposit) reference date forward date. constructed DI1 interest futures reflects nominal yield investors require, inclusive inflation expectations real interest. DOC: Cupom Cambial (FX Swap Implied Rate) curve. curve reflects interest rate differential Brazilian real (BRL) U.S. dollar (USD), implied FX swap contracts. derived contracts local leg pays fixed BRL interest foreign leg pays USD, adjusted spot forward exchange rate. curve useful pricing instruments involve currency exposure hedging strategies. DIC: IPCA-Linked (Real Interest Rate) curve, also referred Cupom de IPCA. curve represents real interest rate (excluding inflation) implied futures contracts indexed Brazilian consumer price index (IPCA). used assess market‚Äôs expectation real returns essential pricing inflation-linked bonds (like NTN-B). curve_name argument allows us specify three curves want data . passing vector like c(\"DIC\", \"DOC\", \"PRE\"), telling function retrieve data three curves selected reference dates. data stored, becomes available querying following functions: yc_brl_get(): function retrieves Brazilian nominal yield curve data (PRE curve), includes accumulated interbank interest rates (DI) selected dates. yc_usd_get(): function retrieves FX-linked yield curve data (DOC curve), reflecting interest rate differential Brazilian real (BRL) U.S. dollar (USD). yc_ipca_get(): function retrieves Brazilian real interest rate curve (DIC curve), based futures contracts linked Brazilian Consumer Price Index (IPCA).","code":"dates <- getdate(\"first bizday\", 2021:2025, \"Brazil/B3\") fetch_marketdata(\"b3-reference-rates\", refdate = dates, curve_name = c(\"DIC\", \"DOC\", \"PRE\"))"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"pre-curve-di-rates","dir":"Articles","previous_headings":"","what":"PRE Curve (DI rates)","title":"Fetching B3 Yield Curves","text":"section, visualize yield curves Nominal Interest Rate, based previously fetched data. section focuses PRE curve, represents nominal interest rate curve built using DI1 futures contracts. contracts reflect market‚Äôs expectations cumulative interbank interest rates (DI rates) reference date future maturity. PRE curve essential understanding nominal yield dynamics Brazil‚Äôs fixed income market, ‚Äôs commonly used pricing public private debt instruments. apply filter restrict forward dates maturities January 1st, 2035. point, futures market becomes significantly less liquid, yield curve relies heavily extrapolation methods rather observable market data. Including long maturities introduce distortions give false sense precision beyond market actually supports. Yield Curves Brazil plot shows nominal yield curve evolves time, different lines representing curves reference date (first business day year 2021 2025). can observe shifts market expectations interest rates detect periods steepening, flattening, inversion curve, often signal changes monetary policy outlook economic sentiment.","code":"df_yc_brl <- yc_brl_get() |>   filter(forward_date < \"2035-01-01\") |>   collect() p <- ggplot(   df_yc_brl,   aes(     x = forward_date,     y = r_252,     group = refdate,     color = factor(refdate)   ) ) +   geom_line(linewidth = 1) +   labs(     title = \"Yield Curves for Brazil\",     subtitle = \"Built using interest rates future contracts\",     caption = \"Source B3 - package rb3\",     x = \"Forward Date\",     y = \"Annual Interest Rate\",     color = \"Reference Date\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent)  print(p)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"ipca-curve-dic-curve","dir":"Articles","previous_headings":"","what":"IPCA Curve (DIC curve)","title":"Fetching B3 Yield Curves","text":"section analyzes DIC curve, represents real interest rate implied futures contracts indexed Brazilian consumer price index (IPCA). reflects market expectations inflation-adjusted (real) returns. DIC curve especially relevant pricing inflation-linked bonds (NTN-Bs) analyzing market‚Äôs perception long-term inflation dynamics. DIxIPCA Yield Curves Brazil plot illustrates real interest rates evolved across different reference dates. rates reflect market‚Äôs view long-term monetary stability inflation control.","code":"df_yc_ipca <- yc_ipca_get() |>   collect() p <- ggplot(   df_yc_ipca |> filter(biz_days > 21, biz_days < 1008),   aes(     x = forward_date,     y = r_252,     group = refdate,     color = factor(refdate)   ) ) +   geom_line(linewidth = 1) +   labs(     title = \"DIxIPCA Yield Curves for Brazil\",     subtitle = \"Built using interest rates future contracts\",     caption = \"Source B3 - package rb3\",     x = \"Forward Date\",     y = \"Annual Interest Rate\",     color = \"Reference Date\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent)  print(p)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"cupom-limpo-usd---doc-curve","dir":"Articles","previous_headings":"","what":"Cupom Limpo (USD - DOC curve)","title":"Fetching B3 Yield Curves","text":"section focuses DOC curve, represents cupom cambial ‚Äî interest rate differential Brazilian real (BRL) U.S. dollar (USD), derived FX swap contracts. DOC curve constructed using pricing contracts one leg pays fixed BRL interest tied USD. reflects market expectations exchange rate interest rate spreads. curves, filter maturities beyond 2035. FX futures contracts tend illiquid longer horizons, extrapolated values beyond point may reflect reliable market pricing. Cupom Limpo (USD) Yield Curves Brazil curve provides insight market prices currency risk interest rate differentials Brazil U.S., key investors operating cross-border markets using hedging strategies.","code":"df_yc_usd <- yc_usd_get() |>   filter(forward_date < \"2035-01-01\") |>   collect() p <- ggplot(   df_yc_usd |> filter(biz_days > 21, biz_days < 2520),   aes(     x = forward_date,     y = r_360,     group = refdate,     color = factor(refdate)   ) ) +   geom_line(linewidth = 1) +   labs(     title = \"Cupom Limpo (USD) Yield Curves for Brazil\",     subtitle = \"Built using interest rates future contracts\",     caption = \"Source B3 - package rb3\",     x = \"Forward Date\",     y = \"Annual Interest Rate\",     color = \"Reference Date\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent)  print(p)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"break-even-inflation-pre-vs-dic","dir":"Articles","previous_headings":"","what":"Break-even Inflation: PRE vs DIC","title":"Fetching B3 Yield Curves","text":"comparing nominal yield curve (PRE) real yield curve (DIC), can derive implied inflation expectation priced market. difference, known break-even inflation, represents inflation rate make investor indifferent holding nominal versus inflation-linked instruments. formula straightforward: Implied Inflation=(1+rnominal)/(1+rreal)‚àí1 \\text{Implied Inflation} = (1 + r_{\\text{nominal}}) / (1 + r_{\\text{real}}) - 1 rnominalr_{\\text{nominal}} comes PRE curve rrealr_{\\text{real}} DIC curve. simplicity, use approximation: Implied Inflation‚âàrnominal‚àírreal \\text{Implied Inflation} \\approx r_{\\text{nominal}} - r_{\\text{real}} Break-even Inflation chart shows inflation expectations embedded market different points time across different maturities. Steeper break-even curves may indicate expected inflationary pressures ahead, flatter curves may reflect confidence inflation control economic deceleration. analysis useful : Pricing inflation-linked bonds Assessing central bank credibility Supporting asset allocation decisions (e.g., real vs nominal fixed income)","code":"# Load and prepare PRE and DIC curves pre <- df_yc_brl |>   select(refdate, forward_date, r_nominal = r_252)  ipca <- df_yc_ipca |>   select(refdate, forward_date, r_real = r_252)  # Join both curves by refdate and forward_date df_be <- inner_join(pre, ipca, by = c(\"refdate\", \"forward_date\")) |>   mutate(break_even = r_nominal - r_real) p <- ggplot(   df_be,   aes(     x = forward_date,     y = break_even,     group = refdate,     color = factor(refdate)   ) ) +   geom_line(linewidth = 1) +   labs(     title = \"Implied Inflation (Break-even) from Yield Curves\",     subtitle = \"Calculated as PRE (nominal) minus DIC (real)\",     caption = \"Source B3 - package rb3\",     x = \"Forward Date\",     y = \"Annual Implied Inflation Rate\",     color = \"Reference Date\"   ) +   theme_light() +   scale_y_continuous(labels = scales::percent)  print(p)"},{"path":"https://ropensci.github.io/rb3/articles/Fetching-historical-yield-curve.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fetching B3 Yield Curves","text":"vignette, explored fetch visualize historical yield curves Brazilian exchange (B3) using rb3 package. covered three types curves: PRE: nominal interest rates, built fixed-rate futures contracts. DIC: real interest rates (inflation-adjusted), derived IPCA-indexed futures. DOC: FX-linked rates (cupom cambial), representing BRL-USD interest differentials. also showed extract break-even inflation expectations comparing nominal real curves ‚Äî powerful tool understanding market‚Äôs inflation outlook. curves widely used : Monetary policy analysis Fixed income pricing Inflation forecasting Asset allocation risk management rb3 package provides simple yet flexible interface retrieving working data directly R. next steps, might consider: Tracking curve movements daily basis Building yield curve interpolation models Estimating forward rates zero-coupon curves Backtesting strategies based curve dynamics Feel free explore package documentation source code advanced features use cases. Happy analyzing!","code":""},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"rb3 package provides tools downloading, processing, analyzing market data B3 (Brazilian stock exchange). vignette guide basics using package download various types market data perform common analyses.","code":"library(rb3) library(dplyr) library(bizdays)"},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"downloading-market-data","dir":"Articles","previous_headings":"","what":"Downloading Market Data","title":"Getting Started","text":"main function fetching market data fetch_marketdata(). function downloads data based template parameter combinations, processes data structured database format.","code":""},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"templates","dir":"Articles","previous_headings":"Downloading Market Data","what":"Templates","title":"Getting Started","text":"Templates predefined configurations specify type data download process . template corresponds specific dataset file type available B3. example: \"b3-cotahist-yearly\": Downloads reads COTAHIST file available year. \"b3-futures-settlement-prices\": Downloads reads settlement prices web page. \"b3-reference-rates\": Downloads reades web page reference interest rates. \"b3-bvbg-086\": Downloads reads BVBG-086 file trading instruments information. Additional information templates can obtained calling template_retrieve() function: know template want use, can download data calling fetch_marketdata(). function takes template name additional parameters arguments.","code":"# List available templates list_templates() #> # A tibble: 9 √ó 2 #>   Template                         Description                                   #>   <chr>                            <chr>                                         #> 1 b3-bvbg-086                      Arquivo de Pre√ßos de Mercado - BVBG-086       #> 2 b3-cotahist-daily                Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 3 b3-cotahist-yearly               Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 4 b3-futures-settlement-prices     Pre√ßos de Ajustes Di√°rios de Contratos Futur‚Ä¶ #> 5 b3-indexes-composition           Composi√ß√£o dos √≠ndices da B3                  #> 6 b3-indexes-current-portfolio     Carteira te√≥rica corrente dos √≠ndices da B3 ‚Ä¶ #> 7 b3-indexes-historical-data       Dados hist√≥ricos e estat√≠sticas dos √≠ndices ‚Ä¶ #> 8 b3-indexes-theoretical-portfolio Carteira Te√≥rica dos √≠ndices da B3 com pesos‚Ä¶ #> 9 b3-reference-rates               Taxas referenciais # Get a specific template template_retrieve(\"b3-cotahist-yearly\") #> Template: b3-cotahist-yearly #> Description: Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arquivo Anual #> Required arguments: #> ‚Ä¢ year: Ano de refer√™ncia #> Fields: #> ‚Ä¢ regtype (numeric): Tipo de registro #> ‚Ä¢ refdate (Date): Data do preg√£o #> ‚Ä¢ bdi_code (numeric): C√≥digo BDI #> ‚Ä¢ symbol (character): C√≥digo de negocia√ß√£o do papel #> ‚Ä¢ instrument_market (numeric): Tipo de mercado #> ‚Ä¢ corporation_name (character): Nome resumido da empresa emissora do papel #> ‚Ä¢ specification_code (character): Especifica√ß√£o do papel #> ‚Ä¢ days_to_settlement (numeric): Prazo em dias do mercado a termo #> ‚Ä¢ trading_currency (character): Moeda de refer√™ncia #> ‚Ä¢ open (numeric): Pre√ßo de abertura do papel #> ‚Ä¢ high (numeric): Pre√ßo m√°ximo do papel #> ‚Ä¢ low (numeric): Pre√ßo m√≠nimo do papel #> ‚Ä¢ average (numeric): Pre√ßo m√©dio do papel #> ‚Ä¢ close (numeric): Pre√ßo √∫ltimo neg√≥cio efetuado com o papel #> ‚Ä¢ best_bid (numeric): Pre√ßo da melhor oferta de compra do papel #> ‚Ä¢ best_ask (numeric): Pre√ßo da melhor oferta de venda do papel #> ‚Ä¢ trade_quantity (numeric): N√∫mero de neg√≥cios efetuados com o papel #> ‚Ä¢ traded_contracts (numeric): Quantidade total de t√≠tulos negociados neste #> papel #> ‚Ä¢ volume (numeric): Volume total de t√≠tulos negociados neste papel #> ‚Ä¢ strike_price (numeric): Pre√ßo de exerc√≠cio para o mercado de op√ß√µes ou valor #> do contrato para o mercado de termo secund√°rio #> ‚Ä¢ strike_price_adjustment_indicator (character): Indicador de corre√ß√£o de #> pre√ßos de exerc√≠cios ou valores de contrato para os mercados de op√ß√µes, termo #> secund√°rio ou futuro #> ‚Ä¢ maturity_date (Date): Data do vencimento para os mercados de op√ß√µes, termo #> secund√°rio ou futuro #> ‚Ä¢ allocation_lot_size (numeric): Fator de cota√ß√£o do papel #> ‚Ä¢ strike_price_in_points (numeric): Pre√ßo de exerc√≠cio em pontos para op√ß√µes #> referenciadas em d√≥lar ou valor de contrato em pontos para termo secund√°rio #> ‚Ä¢ isin (character): C√≥digo do papel no sistema ISIN #> ‚Ä¢ distribution_id (numeric): N√∫mero de distribui√ß√£o do papel"},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"fetching-market-data","dir":"Articles","previous_headings":"Downloading Market Data","what":"Fetching market data","title":"Getting Started","text":"fetch_marketdata() function downloads processes market data based specified template parameters. data stored local database, can queried using specialized functions. code shows example download process data using fetch_marketdata(). total time taken download process data shown console output, also number downloaded files shown. code downloads 44 files containing reference rates PRE DIC curves January 2024. files read stored parquet files forming local database inside rb3.cachedir folder.","code":"# Download daily historical data for a specific date range fetch_marketdata(\"b3-reference-rates\",   refdate = bizseq(\"2024-01-01\", \"2024-01-31\", \"Brazil/B3\"),   curve_name = c(\"PRE\", \"DIC\") ) #> ‚úî Downloading data [53s] #> ‚Ñπ 44 files downloaded #> ‚úî Reading data into DB [6s]"},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"rb3-cachedir-folder","dir":"Articles","previous_headings":"Downloading Market Data","what":"rb3.cachedir folder","title":"Getting Started","text":"rb3.cachedir folder downloaded data stored. set option R, can check current value using: can change location rb3.cachedir folder setting option rb3.cachedir different path. strongly recommended set rb3.cachedir folder .Rprofile file. Inside folder 3 folders: raw: raw downloaded files meta: metadata represets download made db: processed files stored datasets (parquet files) folder structure looks like : raw files initially downloaded stored raw folder. files processed saved parquet files db folder, forming structured datasets can queried using rb3 package functions. data processing occurs two stages: first, raw files transformed stored input layer within db folder. Next, data undergoes refinement saved staging layer, also within db folder. dataset cam accessed using function rb3::template_dataset(). function defaults input layer, can specify layer argument access staging layer needed. can observe dataset input layer 5 columns, dataset staging layer 7 columns. datasets staging layer enriched formatted columns additional data.","code":"getOption(\"rb3.cachedir\") #> [1] \"/home/wilson/dev/rb3/rb3-cache\" # Set the rb3.cachedir folder to a different path options(rb3.cachedir = \"/path/to/your/custom/folder\") rb3.cachedir ‚îú‚îÄ‚îÄ raw ‚îú‚îÄ‚îÄ meta ‚îî‚îÄ‚îÄ db # Get the dataset for the template \"b3-reference-rates\" template_dataset(\"b3-reference-rates\") #> FileSystemDataset with 47 Parquet files #> 5 columns #> refdate: date32[day] #> curve_name: string #> cur_days: int64 #> col1: double #> col2: double # Get the dataset for the template \"b3-reference-rates\" in the input layer template_dataset(\"b3-reference-rates\", layer = \"staging\") #> FileSystemDataset with 47 Parquet files #> 7 columns #> curve_name: string #> refdate: date32[day] #> forward_date: date32[day] #> cur_days: int64 #> biz_days: int64 #> col1: double #> col2: double"},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"accessing-the-data","dir":"Articles","previous_headings":"","what":"Accessing the data","title":"Getting Started","text":"previous sections seen download process data using fetch_marketdata() function access downloaded data using template_dataset() function. template custom functions access data. functions suffix _get(). cotahist_get(): Retrieves historical stock market data. futures_get(): Retrieves futures settlement prices. yc_brl_get(): Retrieves Brazilian nominal yield curve (PRE). yc_ipca_get(): Retrieves Brazilian real interest rate curve (DIC). yc_usd_get(): Retrieves FX-linked yield curve (DOC). many others. example, access data downloaded using b3-reference-rates template, can use yc_brl_get() function: columns r_252 r_360 renamed function yc_brl_get(). happens dataset b3-reference-rates attends three curves PRE, DIC, DOC, columns col1 col2 different meanings curve. reason strongly recommend using custom functions access data instead using template_dataset() function directly.","code":"# Get the Brazilian nominal yield curve (PRE) yc_brl_get() |>   filter(refdate == \"2024-01-31\") |>   collect() #> # A tibble: 257 √ó 7 #>    curve_name refdate    forward_date cur_days biz_days r_252  r_360 #>    <chr>      <date>     <date>          <int>    <int> <dbl>  <dbl> #>  1 PRE        2024-01-31 2024-02-01          1        1 0.116 0 #>  2 PRE        2024-01-31 2024-02-07          7        5 0.112 0.115 #>  3 PRE        2024-01-31 2024-02-14         14        8 0.112 0.0906 #>  4 PRE        2024-01-31 2024-02-15         15        9 0.112 0.0953 #>  5 PRE        2024-01-31 2024-02-16         16       10 0.112 0.0994 #>  6 PRE        2024-01-31 2024-02-21         21       13 0.112 0.0983 #>  7 PRE        2024-01-31 2024-02-28         28       18 0.112 0.102 #>  8 PRE        2024-01-31 2024-02-29         29       19 0.112 0.104 #>  9 PRE        2024-01-31 2024-03-01         30       20 0.112 0.106 #> 10 PRE        2024-01-31 2024-03-04         33       21 0.112 0.101 #> # ‚Ñπ 247 more rows"},{"path":"https://ropensci.github.io/rb3/articles/Getting-started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting Started","text":"rb3 package provides comprehensive efficient framework accessing, processing, analyzing market data B3 (Brazilian stock exchange). vignette, explored key functionalities package, including: Downloading Market Data: Using templates fetch_marketdata() function, demonstrated download process various types market data, reference rates futures settlement prices. Data Storage Organization: reviewed structure rb3.cachedir folder, organizes raw files, metadata, processed datasets efficient access management. Accessing Processed Data: showcased query processed datasets using template-specific functions like template_dataset() custom access functions yc_brl_get() futures_get(). combining power templates, efficient data storage, specialized query functions, rb3 package simplifies process working B3 market data. Whether analyzing yield curves, futures prices, financial datasets, rb3 provides tools needed streamline workflow focus generating insights. encourage explore package adapt functionalities specific use cases financial analysis.","code":""},{"path":"https://ropensci.github.io/rb3/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wilson Freitas. Author, maintainer. Marcelo Perlin. Author.","code":""},{"path":"https://ropensci.github.io/rb3/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Download parse public files released B3 convert useful formats data structures common data analysis practitioners.","code":"@Manual{rb3-package,   title = {Download and Parse Public Data Released by B3 Exchange},   author = {Wilson Freitas and Marcelo Perlin},   year = {2023},   note = {R package version 0.0.8},   url = {https://github.com/ropensci/rb3}, }"},{"path":[]},{"path":"https://ropensci.github.io/rb3/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Download and Parse Public Data Released by B3 Exchange","text":"B3 main financial exchange Brazil, offering access trading systems stocks, futures, options, financial instruments. rb3 package provides tools downloading, processing, analyzing market data B3, including: Stocks & Equities: Historical price data COTAHIST files Futures Contracts: Settlement prices futures contracts Yield Curves: Historical yield curves calculated futures contracts ETFs & BDRs: Data Exchange Traded Funds Brazilian Depositary Receipts REITs (FIIs): Data Brazilian Real Estate Investment Trusts Options: Equity index options contracts Market Indices: B3 indices composition historical data package uses webscraping tools obtain data directly B3‚Äôs website, making accessible R structured datasets. datasets valuable financial analysis, academic research, investment decision-making.","code":""},{"path":"https://ropensci.github.io/rb3/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Parse Public Data Released by B3 Exchange","text":"","code":"# From CRAN (stable version) install.packages(\"rb3\")  # Development version from GitHub if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"ropensci/rb3\")"},{"path":[]},{"path":"https://ropensci.github.io/rb3/index.html","id":"downloading-data","dir":"","previous_headings":"Basic Usage","what":"Downloading Data","title":"Download and Parse Public Data Released by B3 Exchange","text":"Execute following code download data need start working rb3:","code":"# Set the rb3.cachedir folder - it must be executed before loading rb3 package options(rb3.cachedir = \"/path/to/your/custom/folder\")  library(rb3) library(bizdays)  # download COTAHIST data from 2000 to 2025 fetch_marketdata(\"b3-cotahist-yearly\", year = 2000:2025) # download futures settlement prices from 2000 to 2025 fetch_marketdata(\"b3-futures-settlement-prices\", refdate = bizseq(\"2000-01-01\", Sys.Date(), \"Brazil/B3\")) # download yield curves from 2018 to 2025 fetch_marketdata(\"b3-reference-rates\",   refdate = bizseq(\"2018-01-01\", Sys.Date(), \"Brazil/B3\"),   curve_name = c(\"DIC\", \"DOC\", \"PRE\") ) # download indexes composition data - it is necessary to execute `indexes_get()` fetch_marketdata(\"b3-indexes-composition\") # download current portfolio for all indexes fetch_marketdata(\"b3-indexes-current-portfolio\", index = indexes_get(), throttle = TRUE) # download theoretical portfolio for all indexes fetch_marketdata(\"b3-indexes-theoretical-portfolio\", index = indexes_get(), throttle = TRUE) # download historical data for all indexes fetch_marketdata(\"b3-indexes-historical-data\", index = indexes_get(), year = 2000:2025, throttle = TRUE)"},{"path":"https://ropensci.github.io/rb3/index.html","id":"market-data-templates","dir":"","previous_headings":"Basic Usage","what":"Market Data Templates","title":"Download and Parse Public Data Released by B3 Exchange","text":"rb3 package uses template system standardize downloading processing different data types. see available templates:","code":"library(tidyverse) library(bizdays) library(rb3)  # List available templates list_templates() #> # A tibble: 9 √ó 2 #>   Template                         Description                                   #>   <chr>                            <chr>                                         #> 1 b3-bvbg-086                      Arquivo de Pre√ßos de Mercado - BVBG-086       #> 2 b3-cotahist-daily                Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 3 b3-cotahist-yearly               Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 4 b3-futures-settlement-prices     Pre√ßos de Ajustes Di√°rios de Contratos Futur‚Ä¶ #> 5 b3-indexes-composition           Composi√ß√£o dos √≠ndices da B3                  #> 6 b3-indexes-current-portfolio     Carteira te√≥rica corrente dos √≠ndices da B3 ‚Ä¶ #> 7 b3-indexes-historical-data       Dados hist√≥ricos e estat√≠sticas dos √≠ndices ‚Ä¶ #> 8 b3-indexes-theoretical-portfolio Carteira Te√≥rica dos √≠ndices da B3 com pesos‚Ä¶ #> 9 b3-reference-rates               Taxas referenciais"},{"path":"https://ropensci.github.io/rb3/index.html","id":"downloading-market-data","dir":"","previous_headings":"Basic Usage","what":"Downloading Market Data","title":"Download and Parse Public Data Released by B3 Exchange","text":"main function fetching data fetch_marketdata(), downloads data based template parameters:","code":"# Download yield curve data for specific dates fetch_marketdata(\"b3-reference-rates\",   refdate = as.Date(\"2024-01-31\"),   curve_name = \"PRE\" )  # Download futures settlement prices fetch_marketdata(\"b3-futures-settlement-prices\",   refdate = as.Date(\"2024-01-31\") )  # Download yearly COTAHIST files fetch_marketdata(\"b3-cotahist-yearly\", year = 2023)"},{"path":"https://ropensci.github.io/rb3/index.html","id":"working-with-historical-equity-data","dir":"","previous_headings":"Basic Usage","what":"Working with Historical Equity Data","title":"Download and Parse Public Data Released by B3 Exchange","text":"","code":"# Access the data ch <- cotahist_get(\"yearly\")  # Filter for stocks eq <- ch |>   filter(year(refdate) == 2023) |>   cotahist_filter_equity() |>   collect() # Get top 10 most traded stocks symbols <- eq |>   group_by(symbol) |>   summarise(volume = sum(volume)) |>   arrange(desc(volume)) |>   head(10) |>   pull(symbol)  # show top 10 most traded stocks symbols #>  [1] \"VALE3\" \"PETR4\" \"ITUB4\" \"BBDC4\" \"BBAS3\" \"B3SA3\" \"PRIO3\" \"PETR3\" \"RENT3\" #> [10] \"MGLU3\" # Plot the most traded stocks grouped by month eq |>   filter(symbol %in% symbols) |>   mutate(refdate = floor_date(refdate, \"month\")) |>   group_by(refdate, symbol) |>   summarise(volume = sum(volume)) |>   # Plot   ggplot(aes(x = refdate, y = volume, color = symbol)) +   geom_line() +   labs(     title = \"Top 10 Most Traded Stocks in 2023\",     x = \"Date\",     y = \"Volume\"   ) +   scale_y_continuous(labels = scales::comma) #> `summarise()` has grouped output by 'refdate'. You can override using the #> `.groups` argument."},{"path":"https://ropensci.github.io/rb3/index.html","id":"yield-curve-analysis","dir":"","previous_headings":"Basic Usage","what":"Yield Curve Analysis","title":"Download and Parse Public Data Released by B3 Exchange","text":"","code":"# Get Brazilian nominal yield curve (PRE) yc_data <- yc_brl_get() |>   filter(refdate == \"2024-01-31\") |>   collect() # Plot the yield curve ggplot(yc_data, aes(x = forward_date, y = r_252)) +   geom_line() +   labs(     title = \"Brazilian Yield Curve (PRE)\",     x = \"Forward Date\",     y = \"Annual Interest Rate\"   ) +   scale_y_continuous(labels = scales::percent)"},{"path":"https://ropensci.github.io/rb3/index.html","id":"futures-contracts","dir":"","previous_headings":"Basic Usage","what":"Futures Contracts","title":"Download and Parse Public Data Released by B3 Exchange","text":"","code":"# Get futures settlement prices futures_data <- futures_get() |>   filter(commodity == \"DI1\") |>   collect() # Calculate implied rates di1_futures <- futures_data |>   mutate(     maturity_date = maturity2date(maturity_code),     business_days = bizdays(refdate, maturity_date, \"Brazil/ANBIMA\"),     implied_rate = (100000 / price)^(252 / business_days) - 1   )  # Plot the implied rates ggplot(di1_futures, aes(x = maturity_date, y = implied_rate)) +   geom_line() +   geom_point() +   labs(     title = \"Implied Rates for DI1 Futures\",     x = \"Maturity Date\",     y = \"Implied Rate\"   ) +   scale_y_continuous(labels = scales::percent)"},{"path":"https://ropensci.github.io/rb3/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Download and Parse Public Data Released by B3 Exchange","text":"comprehensive documentation examples, visit: Package Website Getting Started Fetching Historical Equity Data Analyzing B3 Index Data Compute Historical Rates B3 Future Prices Fetching B3 Yield Curves","code":""},{"path":"https://ropensci.github.io/rb3/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Download and Parse Public Data Released by B3 Exchange","text":"use rb3 research, please cite :","code":"To cite rb3 in publications use:    Download and parse public files released by B3 and convert them into   useful formats and data structures common to data analysis   practitioners.  A BibTeX entry for LaTeX users is    @Manual{rb3-package,     title = {Download and Parse Public Data Released by B3 Exchange},     author = {Wilson Freitas and Marcelo Perlin},     year = {2023},     note = {R package version 0.0.8},     url = {https://github.com/ropensci/rb3},   }"},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Maturity Code to Corresponding Month ‚Äî code2month","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"function takes character string representing maturity code futures contract returns corresponding month integer. supports new old maturity code formats used futures contracts.","code":""},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"","code":"code2month(x)"},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"x character vector maturity code(s) futures contracts. codes can either single letter (e.g., \"F\", \"G\", \"H\", ...) representing new code format three-letter abbreviation (e.g., \"JAN\", \"FEV\", \"MAR\", ...) representing old code format.","code":""},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"vector integers corresponding months year, 1 = January, 2 = February, ..., 12 = December.","code":""},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"function distinguishes two maturity code formats: new code format uses single letter (e.g., \"F\" = January, \"G\" = February, etc.). old code format uses three-letter abbreviation (e.g., \"JAN\" = January, \"FEV\" = February, etc.).","code":""},{"path":"https://ropensci.github.io/rb3/reference/code2month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Maturity Code to Corresponding Month ‚Äî code2month","text":"","code":"code2month(c(\"F\", \"G\", \"H\", \"J\", \"K\", \"M\", \"N\", \"Q\", \"U\", \"V\", \"X\", \"Z\")) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 code2month(c(\"JAN\", \"FEV\", \"MAR\", \"NOV\", \"DEZ\")) #> [1]  1  2  3 11 12"},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"set functions implement filters obtain organized useful data COTAHIST datasets.","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"","code":"cotahist_filter_equity(x)  cotahist_filter_etf(x)  cotahist_filter_bdr(x)  cotahist_filter_unit(x)  cotahist_filter_fii(x)  cotahist_filter_fidc(x)  cotahist_filter_fiagro(x)  cotahist_filter_index(x)  cotahist_filter_equity_options(x)  cotahist_filter_index_options(x)  cotahist_filter_fund_options(x)"},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"x cotahist dataset","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"dataframe containing requested market data.","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"functions bellow return data plain instruments, stocks, funds indexes. cotahist_filter_equity() returns data stocks UNITs. cotahist_filter_etf() returns data ETFs. cotahist_filter_bdr() returns data BDRs. cotahist_filter_unit() returns data exclusively UNITs. cotahist_filter_index() returns data indices. index data returned cotahist_filter_index() corresponds option expiration days, meaning one index quote per month. cotahist_filter_fii(), cotahist_filter_fidc(), cotahist_filter_fiagro() return data funds. functions bellow return data related options, equities, indexes funds (ETFs). cotahist_filter_equity_options() returns data stock options. cotahist_filter_index_options() returns data index options, currently IBOVESPA. cotahist_filter_funds_options() returns data fund options, currently ETFs. dataset provided must least columns isin, instrument_market, bdi_code specification_code. combination columns used filter desired data.","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist-extracts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering data from COTAHIST datasets ‚Äî cotahist-extracts","text":"","code":"if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_equity() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_etf() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_bdr() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_unit() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_fii() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_fidc() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_fiagro() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_index() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_equity_options() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_index_options() } # } if (FALSE) { # \\dontrun{ df <- cotahist_get() |> cotahist_filter_fund_options() } # }"},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Access COTAHIST datasets ‚Äî cotahist_get","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"COTAHIST files available daily, monthly, yearly data. Therefore, datasets correspond periods (daily, monthly, yearly). See download_marketdata read_marketdata instructions download files create datasets.","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"","code":"cotahist_get(type = c(\"yearly\", \"monthly\", \"daily\"))"},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"type string specifying dataset used: \"daily\", \"monthly\", \"yearly\".","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect().","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"COTAHIST files contain historical quotation data (Cota√ß√µes Hist√≥ricas) stocks, stock options, stock forward contracts, ETFs, ETF options, BDRs, UNITs, REITs (FIIs - Fundos Imobili√°rios), FIAGROs (Fundos da Agroind√∫stria), FIDCs (Fundos de Direitos Credit√≥rios). files B3 hold oldest available information. earliest annual file available dates back 1986. However, recommended use data prior 1995 due monetary stabilization process 1994 (Plano Real). Note prices files adjusted corporate actions. result, ETF series can used without issues. using dataset, necessary download files using download_marketdata function create datasets read_marketdata function.","code":""},{"path":"https://ropensci.github.io/rb3/reference/cotahist_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access COTAHIST datasets ‚Äî cotahist_get","text":"","code":"if (FALSE) { # \\dontrun{ # get all data to the year of 2001 meta <- download_marketdata(\"b3-cotahist-yearly\", year = 2001) read_marketdata(meta) ds_yearly <- cotahist_get()  # Earliest available annual file: 1986 # Recommended starting point: 1995 (after Plano Real) } # } if (FALSE) { # \\dontrun{ # To obtain data from January 2, 2014, the earliest available date: meta <- download_marketdata(\"b3-cotahist-daily\", refdate = as.Date(\"2014-01-02\")) read_marketdata(meta) ds_daily <- cotahist_get(\"daily\") } # } if (FALSE) { # \\dontrun{ # Once you download more dates, the data downloaded before remains stored and you can filter # any date you want. meta <- download_marketdata(\"b3-cotahist-daily\", refdate = as.Date(\"2014-01-03\")) read_marketdata(meta) df_daily <- cotahist_get(\"daily\") |>   filter(refdate == \"2014-01-03\") |>   collect() } # }"},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"Downloads caches financial market datasets B3 (Brazilian Stock Exchange) based predefined templates. Handles file downloading caching.","code":""},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"","code":"download_marketdata(template, do_cache = FALSE, ...)"},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"template character string specifying template name do_cache logical; TRUE forces new download even cached file exists (default: FALSE) ... additional arguments passed template-specific download functions","code":""},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"Returns meta object containing downloaded file's metadata: template - Name template used download_checksum - Unique hash code download download_args - Arguments passed via ... downloaded - Path downloaded file created - Timestamp file creation meta object containing downloaded file's metadata. meta object used read_marketdata function read downloaded file.","code":""},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"function follows workflow: Checks requested data exists cache Downloads data needed (based template specifications) Manages file compression storage Maintains metadata tracking verification Files organized rb3.cachedir follows: Metadata: JSON files 'meta/' directory, named download_checksum Data: Gzipped files 'raw/' directory, named file's checksum Templates YAML documents define: Download parameters methods Data reading instructions Dataset structure (columns, types) Templates can found using list_templates() retrieved template_retrieve().","code":""},{"path":[]},{"path":"https://ropensci.github.io/rb3/reference/download_marketdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Raw Market Data Files from B3 ‚Äî download_marketdata","text":"","code":"if (FALSE) { # \\dontrun{ # Download daily market data meta <- download_marketdata(\"b3-cotahist-daily\",                              refdate = as.Date(\"2024-04-05\")) read_marketdata(meta)  # Download reference rates meta <- download_marketdata(\"b3-reference-rates\",                             refdate = as.Date(\"2024-04-05\"),                             curve_name = \"PRE\") read_marketdata(meta) } # }"},{"path":"https://ropensci.github.io/rb3/reference/fetch_marketdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and process market data ‚Äî fetch_marketdata","title":"Fetch and process market data ‚Äî fetch_marketdata","text":"Downloads market data based template parameter combinations, reads data database.","code":""},{"path":"https://ropensci.github.io/rb3/reference/fetch_marketdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and process market data ‚Äî fetch_marketdata","text":"","code":"fetch_marketdata(template, do_cache = FALSE, throttle = FALSE, ...)"},{"path":"https://ropensci.github.io/rb3/reference/fetch_marketdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and process market data ‚Äî fetch_marketdata","text":"template character string specifying market data template use do_cache logical value indicating whether cache downloaded files (default FALSE). TRUE, downloaded files cached future use. can useful avoiding repeated downloads data. throttle logical value indicating whether throttle download requests (default FALSE). TRUE, 1-second delay introduced requests avoid overwhelming server. ... Named arguments expanded grid combinations fetch data ","code":""},{"path":"https://ropensci.github.io/rb3/reference/fetch_marketdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch and process market data ‚Äî fetch_marketdata","text":"function performs two main steps: Downloads market data files creating combinations provided parameters calling download_marketdata() combination Processes downloaded files reading database using read_marketdata() Progress indicators displayed steps, warnings shown combinations failed download produced invalid files. throttle parameter useful avoiding server overload ensuring requests sent reasonable rate. set TRUE, 1-second delay introduced download request.","code":""},{"path":"https://ropensci.github.io/rb3/reference/fetch_marketdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and process market data ‚Äî fetch_marketdata","text":"","code":"if (FALSE) { # \\dontrun{ fetch_marketdata(\"b3-cotahist-yearly\", year = 2020:2024) fetch_marketdata(\"b3-cotahist-daily\", refdate = bizseq(\"2025-01-01\", \"2025-03-10\", \"Brazil/B3\")) fetch_marketdata(\"b3-reference-rates\",   refdate = bizseq(\"2025-01-01\", \"2025-03-10\", \"Brazil/B3\"),   curve_name = c(\"DIC\", \"DOC\", \"PRE\") ) fetch_marketdata(\"b3-indexes-historical-data\",   throttle = TRUE, index = c(\"IBOV\", \"IBXX\", \"IBXL\"),   year = 2000:2025 ) } # }"},{"path":"https://ropensci.github.io/rb3/reference/futures_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","title":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","text":"function fetches settlement price data B3 futures contracts. function retrieves futures settlement prices B3 dataset, adding symbol column combines commodity maturity_code.","code":""},{"path":"https://ropensci.github.io/rb3/reference/futures_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","text":"","code":"futures_get()"},{"path":"https://ropensci.github.io/rb3/reference/futures_get.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","text":"B3 Market Data","code":""},{"path":"https://ropensci.github.io/rb3/reference/futures_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","text":"arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect(). returned data includes following columns: refdate: Reference date prices. symbol: Futures contract symbol, created concatenating commodity code maturity code. commodity: Commodity code futures contract. maturity_code: Maturity code futures contract. previous_price: Closing price previous trading day. price: Current price futures contract. price_change: Price variation compared previous day. settlement_value: Settlement value futures contract.","code":""},{"path":"https://ropensci.github.io/rb3/reference/futures_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves B3 Futures Settlement Prices ‚Äî futures_get","text":"","code":"if (FALSE) { # \\dontrun{ df_fut <- futures_get() |> filter(refdate == Sys.Date()) |> collect() head(df_fut) } # }"},{"path":"https://ropensci.github.io/rb3/reference/indexes-portfolio.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Portfolio of B3 Indexes ‚Äî indexes-portfolio","title":"Retrieve Portfolio of B3 Indexes ‚Äî indexes-portfolio","text":"functions fetch current theoretical portfolio B3 indexes using predefined dataset templates. data retrieved datasets \"b3-indexes-current-portfolio\" \"b3-indexes-theoretical-portfolio\".","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes-portfolio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Portfolio of B3 Indexes ‚Äî indexes-portfolio","text":"","code":"indexes_current_portfolio_get()  indexes_theoretical_portfolio_get()"},{"path":"https://ropensci.github.io/rb3/reference/indexes-portfolio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Portfolio of B3 Indexes ‚Äî indexes-portfolio","text":"arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect().","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes-portfolio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Portfolio of B3 Indexes ‚Äî indexes-portfolio","text":"","code":"if (FALSE) { # \\dontrun{ template_dataset(\"b3-indexes-current-portfolio\", layer = 2) |>   filter(index %in% c(\"SMLL\", \"IBOV\", \"IBRA\")) |>   collect() } # }  if (FALSE) { # \\dontrun{ template_dataset(\"b3-indexes-theoretical-portfolio\", layer = 2) |>   filter(index == \"IBOV\") |>   collect() } # }"},{"path":"https://ropensci.github.io/rb3/reference/indexes_composition_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Composition of B3 Indexes ‚Äî indexes_composition_get","title":"Retrieve Composition of B3 Indexes ‚Äî indexes_composition_get","text":"function fetches composition B3 indexes. uses template dataset \"b3-indexes-composition\" retrieve data.","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_composition_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Composition of B3 Indexes ‚Äî indexes_composition_get","text":"","code":"indexes_composition_get()"},{"path":"https://ropensci.github.io/rb3/reference/indexes_composition_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Composition of B3 Indexes ‚Äî indexes_composition_get","text":"data frame containing columns: update_date date data last updated. symbol symbol asset. indexes indexes associated asset. arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect().","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_composition_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Composition of B3 Indexes ‚Äî indexes_composition_get","text":"","code":"if (FALSE) { # \\dontrun{   indexes_composition <- indexes_composition_get()   head(indexes_composition) } # }"},{"path":"https://ropensci.github.io/rb3/reference/indexes_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get B3 indexes available ‚Äî indexes_get","title":"Get B3 indexes available ‚Äî indexes_get","text":"Gets B3 indexes available.","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get B3 indexes available ‚Äî indexes_get","text":"","code":"indexes_get()"},{"path":"https://ropensci.github.io/rb3/reference/indexes_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get B3 indexes available ‚Äî indexes_get","text":"character vector symbols indexes available","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get B3 indexes available ‚Äî indexes_get","text":"","code":"if (FALSE) { # \\dontrun{ indexes_get() } # }"},{"path":"https://ropensci.github.io/rb3/reference/indexes_historical_data_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical data from B3 indexes ‚Äî indexes_historical_data_get","title":"Get historical data from B3 indexes ‚Äî indexes_historical_data_get","text":"Fetches historical data B3 indexes.","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_historical_data_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical data from B3 indexes ‚Äî indexes_historical_data_get","text":"","code":"indexes_historical_data_get()"},{"path":"https://ropensci.github.io/rb3/reference/indexes_historical_data_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical data from B3 indexes ‚Äî indexes_historical_data_get","text":"arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect().","code":""},{"path":"https://ropensci.github.io/rb3/reference/indexes_historical_data_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical data from B3 indexes ‚Äî indexes_historical_data_get","text":"","code":"if (FALSE) { # \\dontrun{ fetch_marketdata(\"b3-indexes-historical-data\", index = \"IBOV\", year = 2001:2010) indexes_historical_data_get() |>  filter(index == \"IBOV\", refdate >= as.Date(\"2001-01-01\"), refdate <= as.Date(\"2010-12-31\")) } # }"},{"path":"https://ropensci.github.io/rb3/reference/list_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Templates ‚Äî list_templates","title":"List Available Templates ‚Äî list_templates","text":"Retrieves templates registered template registry returns properties tibble.","code":""},{"path":"https://ropensci.github.io/rb3/reference/list_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Templates ‚Äî list_templates","text":"","code":"list_templates()"},{"path":"https://ropensci.github.io/rb3/reference/list_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Templates ‚Äî list_templates","text":"tibble following columns: Description description template Template template identifier","code":""},{"path":"https://ropensci.github.io/rb3/reference/list_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Templates ‚Äî list_templates","text":"","code":"list_templates() #> # A tibble: 9 √ó 2 #>   Template                         Description                                   #>   <chr>                            <chr>                                         #> 1 b3-bvbg-086                      Arquivo de Pre√ßos de Mercado - BVBG-086       #> 2 b3-cotahist-daily                Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 3 b3-cotahist-yearly               Cota√ß√µes Hist√≥ricas do Preg√£o de A√ß√µes - Arq‚Ä¶ #> 4 b3-futures-settlement-prices     Pre√ßos de Ajustes Di√°rios de Contratos Futur‚Ä¶ #> 5 b3-indexes-composition           Composi√ß√£o dos √≠ndices da B3                  #> 6 b3-indexes-current-portfolio     Carteira te√≥rica corrente dos √≠ndices da B3 ‚Ä¶ #> 7 b3-indexes-historical-data       Dados hist√≥ricos e estat√≠sticas dos √≠ndices ‚Ä¶ #> 8 b3-indexes-theoretical-portfolio Carteira Te√≥rica dos √≠ndices da B3 com pesos‚Ä¶ #> 9 b3-reference-rates               Taxas referenciais"},{"path":"https://ropensci.github.io/rb3/reference/maturity2date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Maturity Code to Date ‚Äî maturity2date","title":"Convert Maturity Code to Date ‚Äî maturity2date","text":"function converts vector maturity codes actual dates.","code":""},{"path":"https://ropensci.github.io/rb3/reference/maturity2date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Maturity Code to Date ‚Äî maturity2date","text":"","code":"maturity2date(x, expr = \"first day\", refdate = NULL)"},{"path":"https://ropensci.github.io/rb3/reference/maturity2date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Maturity Code to Date ‚Äî maturity2date","text":"x character vector three letters string represent maturity futures contracts. expr string indicates day use maturity date, default \"first day\". See bizdays::getdate details argument refdate reference date passed. necessary convert old maturities like JAN0, can Jan/2000 Jan/2010. refdate greater 2001-01-01 JAN0 converted Jan/2010, otherwise, Jan/2000.","code":""},{"path":"https://ropensci.github.io/rb3/reference/maturity2date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Maturity Code to Date ‚Äî maturity2date","text":"vector dates corresponding input maturity codes. Convert Maturity Code Date function converts vector maturity codes actual dates. Get corresponding maturity date three characters string represent maturity futures contracts. Date vector maturity dates","code":""},{"path":"https://ropensci.github.io/rb3/reference/maturity2date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Maturity Code to Date ‚Äî maturity2date","text":"","code":"maturity2date(c(\"F22\", \"F23\", \"G23\", \"H23\", \"F45\"), \"first day\") #> [1] \"2022-01-01\" \"2023-01-01\" \"2023-02-01\" \"2023-03-01\" \"2045-01-01\" maturity2date(c(\"F23\", \"K35\"), \"15th day\") #> [1] \"2023-01-15\" \"2035-05-15\" maturity2date(c(\"AGO2\", \"SET2\"), \"first day\") #> [1] \"2002-08-01\" \"2002-09-01\""},{"path":"https://ropensci.github.io/rb3/reference/rb3-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and Process B3 Data ‚Äî rb3-package","title":"Access and Process B3 Data ‚Äî rb3-package","text":"rb3 package provides tools accessing, processing, analyzing public files B3, Brazilian Stock Exchange. facilitates handling various datasets published B3, including financial market data, metadata, auxiliary files. package supports efficient data storage querying Arrow datasets offers utilities managing datasets optimize workflows. rb3, users can streamline process transforming raw B3 data actionable insights analysis reporting.","code":""},{"path":[]},{"path":"https://ropensci.github.io/rb3/reference/rb3-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Access and Process B3 Data ‚Äî rb3-package","text":"Maintainer: Wilson Freitas wilson.freitas@gmail.com Authors: Marcelo Perlin marceloperlin@gmail.com","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3.cachedir.html","id":null,"dir":"Reference","previous_headings":"","what":"rb3.cachedir Option ‚Äî rb3.cachedir","title":"rb3.cachedir Option ‚Äî rb3.cachedir","text":"rb3.cachedir option used specify directory cached data stored using rb3 package. option allows users define custom directory caching, can improve performance avoiding repeated downloads computations.","code":""},{"path":[]},{"path":"https://ropensci.github.io/rb3/reference/rb3.cachedir.html","id":"setting-the-rb-cachedir-option","dir":"Reference","previous_headings":"","what":"Setting the rb3.cachedir Option","title":"rb3.cachedir Option ‚Äî rb3.cachedir","text":"set rb3.cachedir option, use options() function provide desired directory path string. example:   Replace \"/path///cache/directory\" actual path want cached data stored.","code":"# Set the cache directory to a custom path options(rb3.cachedir = \"/path/to/your/cache/directory\")"},{"path":"https://ropensci.github.io/rb3/reference/rb3.cachedir.html","id":"viewing-the-current-value-of-rb-cachedir","dir":"Reference","previous_headings":"","what":"Viewing the Current Value of rb3.cachedir","title":"rb3.cachedir Option ‚Äî rb3.cachedir","text":"check current value rb3.cachedir option, use getOption() function:   return path directory currently set caching, NULL option set.","code":"# View the current cache directory getOption(\"rb3.cachedir\")"},{"path":"https://ropensci.github.io/rb3/reference/rb3.cachedir.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"rb3.cachedir Option ‚Äî rb3.cachedir","text":"Ensure specified directory exists writable. rb3.cachedir option set, package use temporary directory (base::tempdir()).","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3.cachedir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rb3.cachedir Option ‚Äî rb3.cachedir","text":"","code":"# Set the cache directory options(rb3.cachedir = \"~/rb3_cache\")  # Verify the cache directory cache_dir <- getOption(\"rb3.cachedir\") print(cache_dir) #> [1] \"~/rb3_cache\"  # In this example, the cache directory is set to `~/rb3_cache`, and the value  # is then retrieved and printed to confirm the setting."},{"path":"https://ropensci.github.io/rb3/reference/rb3_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the rb3 package cache folders ‚Äî rb3_bootstrap","title":"Initialize the rb3 package cache folders ‚Äî rb3_bootstrap","text":"function sets necessary directory structure caching rb3 data. creates main cache folder three subfolders: 'raw', 'meta', 'db'. folder paths stored rb3 registry later use.","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the rb3 package cache folders ‚Äî rb3_bootstrap","text":"","code":"rb3_bootstrap()"},{"path":"https://ropensci.github.io/rb3/reference/rb3_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the rb3 package cache folders ‚Äî rb3_bootstrap","text":"function first checks 'rb3.cachedir' option set. , uses subfolder temporary directory. creates main cache folder three subfolders already exist, stores paths rb3 registry. cache structure includes: raw folder - storing raw downloaded data meta folder - storing metadata db folder - database files","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize the rb3 package cache folders ‚Äî rb3_bootstrap","text":"","code":"if (FALSE) { # \\dontrun{ options(rb3.cachedir = \"~/rb3-cache\") rb3_bootstrap() } # }"},{"path":"https://ropensci.github.io/rb3/reference/rb3_db_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","title":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","text":"function provides consistent way connect DuckDB database used RB3 package. returns existing connection one already established valid, creates new connection needed.","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3_db_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","text":"","code":"rb3_db_connection()"},{"path":"https://ropensci.github.io/rb3/reference/rb3_db_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","text":"DuckDB connection object","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3_db_connection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","text":"function first checks valid connection already exists package registry. , establishes new connection DuckDB database located configured database folder stores connection package registry.","code":""},{"path":"https://ropensci.github.io/rb3/reference/rb3_db_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a DuckDB Database Connection for the RB3 Package ‚Äî rb3_db_connection","text":"","code":"# Get a connection to the RB3 database con <- rb3_db_connection()"},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"B3 provides various files containing valuable information traded assets exchange --counter (OTC) market. files include historical market data, trading data, asset registration data stocks, derivatives, indices. function reads files parses content according specifications defined template.","code":""},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"","code":"read_marketdata(meta)"},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"meta list containing downloaded file's metadata, typically returned download_marketdata.","code":""},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"function invisibly returns parsed data.frame successful, NULL error occurred.","code":""},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"function reads downloaded file parses content according specifications schema defined template associated meta object. template specifies file format, column definitions, data types. parsed data written partitioned dataset Parquet format, stored directory structure based template name data layer. directory located within db subdirectory rb3.cachedir directory. partitioning scheme also defined template, allowing efficient querying data using arrow package. error occurs file processing, function issues warning, removes downloaded file metadata, returns NULL.","code":""},{"path":[]},{"path":"https://ropensci.github.io/rb3/reference/read_marketdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and parse raw market data files downloaded from the B3 website. ‚Äî read_marketdata","text":"","code":"if (FALSE) { # \\dontrun{ meta <- download_marketdata(\"b3-cotahist-daily\", refdate = as.Date(\"2024-04-05\")) read_marketdata(meta) } # }"},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced Dataset Creation ‚Äî superdataset","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"maximize utility B3's existing datasets, several functions integrate data multiple sources generate specialized datasets specific analytical needs. instance, cotahist_equity_options_superset() combines data COTAHIST datasets (b3-cotahist-yearly, b3-cotahist-monthly, b3-cotahist-daily) Reference Rates (b3-reference-rates) construct dataset containing stock options data. dataset includes details closing price underlying stock, ticker symbol, applicable interest rate option expiration. comprehensive data enables users perform option pricing calculate implied volatility.","code":""},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"","code":"cotahist_options_by_symbols_get(symbols)  yc_brl_with_futures_get(refdate)  yc_usd_with_futures_get(refdate)  yc_ipca_with_futures_get(refdate)"},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"symbols list symbols extract market data COTAHIST dataset. refdate Date object specifying reference date retrieve data","code":""},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"function cotahist_options_by_symbol_superset() return object inherits arrow_dplyr_query since tries preserve lazy evaluation avoids collecting data return. functions yc_brl_with_futures_get(), yc_usd_with_futures_get() yc_ipca_with_futures_get() return data.frame containing yield curve data merged futures contract information. data pre-collected (lazy) includes columns respective yield curve function plus symbol column identifying corresponding futures contract.","code":""},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"functions cotahist_equity_options_superset(), cotahist_funds_options_superset(), cotahist_index_options_superset(), cotahist_options_by_symbol_superset() use information COTAHIST datasets (b3-cotahist-yearly, b3-cotahist-monthly, b3-cotahist-daily) Reference Rates (b3-reference-rates) return dataframe containing stock option data, including closing price underlying stocks, ticker underlying asset, interest rate option's expiration. returned dataframe contains following columns: \"refdate\", \"symbol\", \"type\", \"symbol_underlying\", \"strike_price\", \"maturity_date\", \"r_252\", \"close\", \"close_underlying\", \"volume\", \"trade_quantity\", \"traded_contracts\". cotahist_options_by_symbol_superset() returns dataset filtered specified asset ticker. Returned objects preserve lazy evaluation whenever possible avoid collected last possible moment. Exceptions occur operations performed using Arrow's operators ‚Äî cases, data collected data.frames returned. Please refer documentation identify situations behavior applies. functions retrieve yield curve data merged corresponding futures contract information: yc_brl_with_futures_get(): BRL nominal rates DI1 futures contracts yc_usd_with_futures_get(): USD rates (Cupom Cambial) DDI futures contracts yc_ipca_with_futures_get(): Real (inflation-indexed) rates DAP futures contracts functions combine data B3 Reference Rates (b3-reference-rates) Futures Settlement Prices (b3-futures-settlement-prices) create comprehensive yield curve datasets. resulting data highlights key vertices along curve corresponding futures contracts, providing insight term structure interest rates. function requires specific reference date prevent excessive memory usage ensure optimal performance.","code":""},{"path":"https://ropensci.github.io/rb3/reference/superdataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced Dataset Creation ‚Äî superdataset","text":"","code":"if (FALSE) { # \\dontrun{ date <- preceding(Sys.Date() - 1, \"Brazil/ANBIMA\") bova_options <- cotahist_options_by_symbols_get(\"BOVA11\") |> filter(refdate == date) petr_options <- cotahist_options_by_symbols_get(c(\"PETR4\", \"PETR3\")) |> filter(refdate == date) } # }  if (FALSE) { # \\dontrun{ # Get data for the last business day date <- preceding(Sys.Date() - 1, \"Brazil/ANBIMA\")  # Retrieve BRL yield curve with DI1 futures brl_curve <- yc_brl_with_futures_get(date) head(brl_curve)  # Retrieve USD yield curve with DDI futures usd_curve <- yc_usd_with_futures_get(date)  # Retrieve inflation-indexed yield curve with DAP futures ipca_curve <- yc_ipca_with_futures_get(date) } # }"},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a Dataset for a Template ‚Äî template_dataset","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"function provides access dataset associated specific template. retrieves dataset stored database folder given template layer, using schema defined template configuration.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"","code":"template_dataset(template, layer = NULL)"},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"template template identifier template object. specifies dataset retrieve. layer layer dataset access (e.g., \"input\" \"staging\"). NULL, layer \"input used.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"Arrow dataset object representing data specified template layer.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"template_dataset() function generic function dispatches specific methods based type template argument. retrieves dataset resolving template using template_retrieve() input template identifier.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access a Dataset for a Template ‚Äî template_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Access the dataset for the \"b3-reference-rates\" template ds <- template_dataset(\"b3-reference-rates\")  # Access the dataset for the \"b3-reference-rates\" template in the staging layer ds <- template_dataset(\"b3-reference-rates\", layer = \"staging\")  # Query the dataset ds |>   dplyr::filter(refdate > as.Date(\"2023-01-01\")) |>   dplyr::collect() } # }"},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Metadata for a Template Download ‚Äî template_meta_load","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"functions provide methods load metadata associated template arguments used specific download.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"","code":"template_meta_load(template, ...)"},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"template object representing template. Can class character (template ID) template (template object). ... Additional arguments used specific download.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"metadata associated download.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"download_marketdata() function returns meta object refers specific download. meta object exist, created. specific download already performed past, meta file exist, download_marketdata() raise error upon detecting . cases, template_meta_load() function used load meta object associated existing meta file.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_meta_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Metadata for a Template Download ‚Äî template_meta_load","text":"","code":"# Example usage with a template ID m <- tryCatch(download_marketdata(\"b3-indexes-composition\"), error = function(e) {   template_meta_load(\"b3-indexes-composition\") }) read_marketdata(m)"},{"path":"https://ropensci.github.io/rb3/reference/template_retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a template by its name ‚Äî template_retrieve","title":"Retrieve a template by its name ‚Äî template_retrieve","text":"function retrieves template identified name.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a template by its name ‚Äî template_retrieve","text":"","code":"template_retrieve(template_name)"},{"path":"https://ropensci.github.io/rb3/reference/template_retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a template by its name ‚Äî template_retrieve","text":"template_name name identifying template retrieve.","code":""},{"path":"https://ropensci.github.io/rb3/reference/template_retrieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a template by its name ‚Äî template_retrieve","text":"template associated given name.","code":""},{"path":"https://ropensci.github.io/rb3/reference/yc_xxx_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","title":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","text":"functions retrieve yield curve data, either available curves (yc_get) specifically : nominal rates curve (yc_brl_get). nominal rates curve USD Brazil - Cupom Cambial Limpo (yc_usd_get). real rates curve (yc_ipca_get).","code":""},{"path":"https://ropensci.github.io/rb3/reference/yc_xxx_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","text":"","code":"yc_get()  yc_brl_get()  yc_ipca_get()  yc_usd_get()"},{"path":"https://ropensci.github.io/rb3/reference/yc_xxx_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","text":"arrow_dplyr_query ArrowObject, representing lazily evaluated query. underlying data collected explicitly requested, allowing efficient manipulation large datasets without immediate memory usage. trigger evaluation return results R tibble, use collect(). returned data includes following columns: curve_name: Identifier yield curve (e.g., \"PRE\", \"DOC\", \"DIC\"). refdate: Reference date curve. forward_date: Maturity date associated interest rate. biz_days: Number business days refdate forward_date. cur_days: Number calendar days refdate forward_date. r_252: Annualized interest rate based 252 business days. r_360: Annualized interest rate based 360 calendar days.","code":""},{"path":"https://ropensci.github.io/rb3/reference/yc_xxx_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","text":"yield curve data downloaded B3 website https://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-taxas-referenciais-bmf-ptBR.asp. See Curve Manual link https://www.b3.com.br/data/files/8B/F5/11/68/5391F61043E561F6AC094EA8/Manual_de_Curvas.pdf details.","code":""},{"path":"https://ropensci.github.io/rb3/reference/yc_xxx_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Yield Curve Data ‚Äî yc_xxx_get","text":"","code":"if (FALSE) { # \\dontrun{ df <- yc_get() |>   filter(curve_name == \"PRE\") |>   collect() } # } if (FALSE) { # \\dontrun{ df_yc <- yc_brl_get() |>   filter(refdate == Sys.Date()) |>   collect() head(df_yc) } # } if (FALSE) { # \\dontrun{ df_yc_ipca <- yc_ipca_get() |>   filter(refdate == Sys.Date()) |>   collect() head(df_yc_ipca) } # } if (FALSE) { # \\dontrun{ df_yc_usd <- yc_usd_get() |>   filter(refdate == Sys.Date()) |>   collect() head(df_yc_usd) } # }"},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-010","dir":"Changelog","previous_headings":"","what":"rb3 0.1.0","title":"rb3 0.1.0","text":"Introduced new template framework longer uses proto fully adapted downloader reader functions. Added functionality download process futures settlement prices using templates. Heavily refactored codebase improve readability maintainability. Enhanced error handling logging throughout package. caching system now organizes files template, making easier manage retrieve cached data. Uses arrow efficient data storage retrieval. Removed dependencies rvest, proto, ascii, readxl packages aren‚Äôt heavy used. Fixed test cases align new template framework. Fixed issues glue environment list requiring explicit passing environment. Implemented registry singleton pattern. Removed filename text match find templates.","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-0012","dir":"Changelog","previous_headings":"","what":"rb3 0.0.12","title":"rb3 0.0.12","text":"CRAN release: 2025-02-18 Fix glue / envir list passed environment Make vignettes fail gracefully","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-0011","dir":"Changelog","previous_headings":"","what":"rb3 0.0.11","title":"rb3 0.0.11","text":"CRAN release: 2024-07-13 Check empty files download.","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-0010","dir":"Changelog","previous_headings":"","what":"rb3 0.0.10","title":"rb3 0.0.10","text":"CRAN release: 2023-04-14 Improved error handling read_marketdata. Improved checks test-company.R exception handling empty downloaded files. Removed tidyselect warnings scraper-company.R.","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-009","dir":"Changelog","previous_headings":"","what":"rb3 0.0.9","title":"rb3 0.0.9","text":"CRAN release: 2023-03-24 Corrected BUG: function company_cash_dividends_get return cash dividends Implemented new option templates: verifyssl. defaults TRUE, always use ssl, FALSE option set httr skip ssl verification. Corrected futures_get futures_mget handle equity futures","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-008","dir":"Changelog","previous_headings":"","what":"rb3 0.0.8","title":"rb3 0.0.8","text":"CRAN release: 2023-03-05 functions company_cash_dividends_get, company_info_get, company_stock_dividends_get, company_subscriptions_get get company‚Äôs informations","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-007","dir":"Changelog","previous_headings":"","what":"rb3 0.0.7","title":"rb3 0.0.7","text":"CRAN release: 2022-12-14 function index_get download historical data B3 indexes (Issue #39) added option rb3.silent (defaults FALSE) hide alert messages progress bar added option rb3.clear.cache (defaults FALSE) remove files invalid content cache folder GetPortfolioDay_IndexStatistics historical time series B3 indexes new vignette: B3 Indexes changed futures_get maturity2date use calendar Brazil/BMF maturity2date new argument refdate, must passed converting old maturities like JAN0, FEV0, ‚Ä¶","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-006","dir":"Changelog","previous_headings":"","what":"rb3 0.0.6","title":"rb3 0.0.6","text":"CRAN release: 2022-08-19 updated documentation functions code2month maturity2date now accept old 4 characters maturity code, 2006 new function cotahist_options_by_symbol_superset joins options data, equity data interest rates option given symbol (Issue #50) corrected BUG cache system, avoid caching NULL returns (Issue #52) corrected BUG cdi_get idi_get use do_cache = FALSE (Issue #51)","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-005","dir":"Changelog","previous_headings":"","what":"rb3 0.0.5","title":"rb3 0.0.5","text":"CRAN release: 2022-07-16 updated documentation cache creates folder template organize files inside cache folder. Pass do_cache = FALSE save RDS file, defaults TRUE. corrected BUG COTAHIST_YEARLY, uses cache wrongly (Issue #44) corrected BUG due change fixedincome - function rates renamed implied_rate","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-004","dir":"Changelog","previous_headings":"","what":"rb3 0.0.4","title":"rb3 0.0.4","text":"CRAN release: 2022-06-22 added locale en templates: COTAHIST_* NegociosIntraday intraday listed market trades NegociosBalcao intraday OTC (Debentures) trades NegociosBTB intraday lending trades imports organized (using importFrom NAMESPACE) added option rb3.cachedir set default cache directory order use cached files across multiple sessions","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-003","dir":"Changelog","previous_headings":"","what":"rb3 0.0.3","title":"rb3 0.0.3","text":"CRAN release: 2022-05-29 fixed tests yc_get(). updated bizdays version 0.1.10 (use load_builtin_calendars - Issue #31). changes ropensci process: added tests improve test coverage, functions renamed, codemeta Contributing.md. GetStockIndex get composition B3 indexes. GetTheoricalPortfolio get composition weights B3 indexes. GetPortfolioDay get composition, weights segments B3 indexes. CenariosCurva scenarios term structures interest rates. CenariosPrecoReferencia reference prices scenarios. IndexReport indexes daily market data. PriceReport daily prices market data. GetListedSupplementCompany supplement data listed companies. GetDetailsCompany get companies details (name, codeCVM, ‚Ä¶). GetListedCashDividends get list cash dividends. yc_ipca_get yc_ipca_mget real interest rates yc_usd_get yc_usd_mget USD interest rates Brazil cotahist_get_symbols get stocks list symbols cotahist_etfs_get, cotahist_fiis_get, cotahist_fidcs_get, cotahist_fiagros_get function cotahist_funds_get replaced ones. index_comp_get returns index composition index_weights_get returns index weights index_by_segment_get returns indexes assets grouped segments indexes_get lists available indexes indexes_last_update returns date indexes updated indexreport_get indexreport_mget download index report data cotahist_equity_options_superset joins options data, equity data interest rates option - useful run option volatility models. yc_superset, yc_usd_superset, yc_ipca_superset mark futures maturities yield curve.","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-002","dir":"Changelog","previous_headings":"","what":"rb3 0.0.2","title":"rb3 0.0.2","text":"CRAN release: 2022-05-10 changes ropensci process, replaced sapply purrr::map_xxx. improved class Filename, added new methods. added argument destdir = NULL convert_to function. created functions yc_get / yc_mget futures_get / futures_mget (Issue #26). improved fields creation (Issue #27). added downloader/reader GetStockIndex, JSON file relations stocks indexes.","code":""},{"path":"https://ropensci.github.io/rb3/news/index.html","id":"rb3-001","dir":"Changelog","previous_headings":"","what":"rb3 0.0.1","title":"rb3 0.0.1","text":"CRAN release: 2022-05-05 first release","code":""}]
